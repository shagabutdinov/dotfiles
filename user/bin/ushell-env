export PATH=$PATH:/home/leo/.composer/vendor/bin:/usr/lib/jvm/java-8-openjdk/bin/:/home/leo/.gem/ruby/2.3.0/bin:/home/leo/src/go/bin

export BROWSER=chromium
export APPLICATION_ENV=development
export LC_ALL="en_US.UTF-8"

export PROMPT="%{$bg[blue]%}%{$fg[white]%}%2~ å†¬%{$reset_color%} "
export GOPATH=~/src/go

HISTSIZE=999999999
SAVEHIST=999999999

APPEND_HISTORY=yes
INC_APPEND_HISTORY=yes
SHARE_HISTORY=yes

HIST_IGNORE_DUPS=no
HIST_IGNORE_ALL_DUPS=no
HIST_EXPIRE_DUPS_FIRST=no
HIST_SAVE_NO_DUPS=no
HIST_FIND_NO_DUPS=no

export TERM='rxvt-unicode'
export COLORTERM='rxvt-unicode-256color'

autoload -U select-word-style
select-word-style bash

bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word

autoload -U promptinit
promptinit

zle -N prepend-sudo prepend_sudo
function prepend_sudo() {
        if [ "$BUFFER" ]; then
                BUFFER="sudo "$BUFFER
        else
                BUFFER="sudo "$(fc -ln -1)
        fi
        CURSOR=$(($CURSOR+5))
}

function o() {
  nohup xdg-open "$@" > /dev/null 2> /dev/null &
  disown
}

bindkey "^T" prepend-sudo
alias -g G="| grep"

alias yaourt='yaourt --noconfirm'
alias mv=/bin/mv
alias pwgen='pwgen 12'
alias nc='sudo netctl'
alias ag='alias | grep -A 2 -B 2'
alias cds='cd ~/src/'

alias s='subl3'
alias b='bundle exec'
alias bi='bundle install --path vendor/bundle --jobs 32'
alias X='| xsel -ib'
alias l='ls --color -hl --group-directories-first'
alias ls='ls --color -h --group-directories-first'

alias pm='sudo pacman'
alias pms='sudo pacman -S'
alias pmr='sudo pacman -R'
alias pmro='sudo pacman -Rns \$(pacman -Qtdq)'
alias pmq='pacman -Ql'

alias sc='sudo systemctl'
alias scs='sudo systemctl start'
alias scr='sudo systemctl restart'
alias sct='sudo systemctl stop'

alias dfp='balmora dotfiles-submit'
alias dfu='balmora dotfiles-update'

export GREP_OPTIONS=''
export NODE_PATH="~/.node:/usr/lib/node_modules"
export WINEARCH='win32'

alias grep='grep --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --color=auto'
alias tree='tree --dirsfirst'
alias ps='ps -xau'
alias cal='cal -m $(date +%Y)'
alias uwhatsapp='chromium --app=https://web.whatsapp.com'

alias wd='nmcli -p dev wifi list'
alias wc='nmcli -p dev wifi connect'
alias wl='nmcli -p con show'
alias ws='nmcli -p con show --active'
alias wu='nmcli -p con up id'

alias d='docker'
alias de='docker exec -i -t'
alias di='docker inspect'
alias dp='docker ps --format "table{{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}"'
alias dr='docker run --rm -i -t'
alias drm='docker rm  --force'
alias drma='docker rm --force $(docker ps -q -a)'
alias ds='docker stop'
alias dsa='docker stop $(docker ps -q)'
alias dl='docker logs --tail 200'
alias dlf='docker logs --follow'
alias da='docker attach --no-stdin'

alias k='kubectl'
alias ka='kubectl apply'
alias kaf='kubectl apply -f kubernetes.yml'
alias kl='kubectl logs'
alias kd='kubectl describe'
alias kdp='kubectl describe pods'
alias kds='kubectl describe services'
alias kdd='kubectl describe deployment'
alias kc='kubectl create'
alias kcf='kubectl create -f kubernetes.yml'
alias kr='kubectl delete'
alias krf='kubectl delete -f kubernetes.yml'
alias krp='kubectl delete pod'
alias krs='kubectl delete service'
alias krd='kubectl delete deployment'
alias kg='kubectl get'
alias kgp='kubectl get pods'
alias kgs='kubectl get services'
alias kgd='kubectl get deployments'
alias ke='kubectl exec'

alias c='docker-compose -f'

alias cm='\
  docker-compose -f config/$(ls --color=none config/ | \
    grep --color=none \\.local)/main.yml \
'

alias cu='\
  docker-compose -f config/$(ls --color=none config/ | \
    grep --color=none \\.local)/main.yml up \
'

alias cs='\
  docker-compose -f config/$(ls --color=none config/ | \
    grep --color=none \\.local)/main.yml stop \
'

alias cr='\
  docker-compose -f config/$(ls --color=none config/ | \
    grep --color=none \\.local)/main.yml stop;
  docker-compose -f config/$(ls --color=none config/ | \
    grep --color=none \\.local)/main.yml up \
'

alias crm='\
  docker-compose -f config/$(ls --color=none config/ | \
    grep --color=none \\.local)/main.yml stop;
  docker-compose -f config/$(ls --color=none config/ | \
    grep --color=none \\.local)/main.yml rm
'

function restart-project() {
  PROJECT_PATH=$(project-path)

  PROJECT_ENV=$(
    ls --color=none $PROJECT_PATH/config/ |
      grep --color=none \\.local
  )

  docker-compose -f $PROJECT_PATH/config/$PROJECT_ENV/main.yml stop
  docker-compose -f $PROJECT_PATH/config/$PROJECT_ENV/main.yml up
}


alias co='sudo chown -R leo: '
alias cc='sudo chown -R leo: .'

alias gs='git show --color'
alias gsp='git commit -v -a && git push'
alias gsa='git commit -v -a --amend && git push --force'
alias gsn='git commit -v -a --amend --no-verify && git push --force'
alias gcn='git commit --no-verify'
alias gpf='git push --force'
alias ge='git rebase'
alias gei='git rebase --interactive'
alias gec='git rebase --continue'
alias gea='git rebase --abort'
alias gpu='git push -u origin $(current_branch)'
alias gdd='git diff --color | diff-so-fancy | less'
alias gdc='git diff --cached'
alias gh='git stash'
alias ghp='git stash pop'
alias gfp='git fetch --prune'
alias gcb='git checkout origin/dev'
alias gcm='git checkout origin/master'
alias gcs='git checkout origin/staging'
alias gt='git reset'
alias gth='git reset --hard'

function rebase-current-branch-on-master() {
  git fetch
  git rebase origin/master
}

alias geo=rebase-current-branch-on-master

alias json='python -m "json.tool"'

function find-docker-container() {
  echo $(
    docker ps --format "table{{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}" |
    grep -E $1 |
    grep $2 $3 |
    sort -k 2 |
    head -n 1 |
    awk "{ print \$1 }"
  )
}

alias dbe='docker exec -i -t $(find-docker-container "(backend|app)\." -v admin)'
alias dbea='docker exec -i -t $(find-docker-container "(backend|app)\." admin)'
alias dte='docker exec -i -t $(find-docker-container "test.(backend|app)" backend)'
alias dfe='docker exec -i -t $(find-docker-container frontend -v admin)'
alias dfea='docker exec -i -t $(find-docker-container frontend admin)'

alias isd='issue -S --from origin/dev --id '
alias ism='issue -S --from origin/master --id '

alias x=' \
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
'

alias xb=' \
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) bash
'

alias xs=' \
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    spring \
'

alias xc='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rails console \
'

alias xr='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rails runner \
'

alias xdm='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rake db:migrate \
'

alias xdr='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rake db:rollback \
'

alias xdd='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rake db:migrate:redo \
'

alias xdt='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rake db:migrate:status \
'

alias xdi='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rake db:create db:structure:load db:seed \
'

alias xds='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    rake db:seed \
'

alias xbi='
  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
    bundle install --jobs 8 --path vendor/bundle --full-index \
'

function open-project-database-console() {
  CONTAINER=$(find-docker-container postgres -v admin)
  echo $CONTAINER
  if [ -n "$CONTAINER" ]; then
    docker exec -i -t $CONTAINER psql -P pager -U postgres database
  fi

  CONTAINER=$(find-docker-container mysql -v admin)
  echo $CONTAINER
  if [ -n "$CONTAINER" ]; then
    docker exec -i -t $CONTAINER mysql -u user -ppassword database
  fi

  echo "NO DATABASE CONTAINER FOUND"
}

alias xd='open-project-database-console'

alias xy='
  bundle exec cap staging deploy api:restart \
    sidekiq:stop sidekiq:start
'

alias xyp='
  bundle exec cap production deploy api:restart \
    sidekiq:stop sidekiq:start
'

alias z=' \
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
'

alias zx=' \
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rspec \
'

alias zb=' \
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) bash
'

alias zs=' \
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    spring \
'

alias zc='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rails console \
'

alias zr='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rails runner \
'

alias zdm='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rake db:migrate \
'

alias zdr='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rake db:rollback \
'

alias zdd='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rake db:migrate:redo \
'

alias zdt='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rake db:migrate:status \
'

alias zdi='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rake db:create db:structure:load \
'

alias zds='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    rake db:seed \
'

alias zbi='
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) \
    bundle install --jobs 8 --path vendor/bundle --full-index \
'

alias zd='docker exec -i -t $(find-docker-container postgres -v admin) \
  psql -P pager -U postgres test \
'

function backend-path() {
  RESULT=$(
    docker inspect $(find-docker-container "(backend|app)\." -v admin) |
      grep -o '/.*:/app:rw' | sed -E "s/:.*//"
  )

  echo $RESULT
}

function project-path() {
  echo $(backend-path)/..
}

function xgm {
  MIGRATION=$(
    docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) rails generate migration $@ |
      grep -o 'db/.*.rb' |
      head -n 1
  )

  docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) chown 1000:1000 $MIGRATION
  subl3 $(project-path)/app/$MIGRATION
}

alias xp=' \
  cd $(project-path)/$(ls -la $(project-path) | grep -E -o "(app|backend)")
'

alias xx='cd $(project-path)'

umask 002

eval "$(ssh-agent -s)" > /dev/null 2>&1
ssh-add > /dev/null 2>&1

function deploy-celluloidheaven-to-staging {
  docker exec -i -t $(find-docker-container "test.(backend|app)" -v admin) rspec
  if [ $? -ne 0 ]; then
    echo "\033[0;31mBUILD FAILED\033[0m"
    return 1
  fi

  git push
  if [ $? -ne 0 ]; then
    echo "\033[0;31mPUSH FAILED\033[0m"
    return 1
  fi

  bundle exec cap staging deploy deploy:migrate sidekiq:restart
  if [ $? -ne 0 ]; then
    echo "\033[0;31mDEPLOY FAILED\033[0m"
    return 1
  fi

  return 0
}

function download-celluloidheaven-staging-data {
  cd $(project-path)

  docker stop $(find-docker-container "(backend|app)\." -v admin)

  docker exec -i $(find-docker-container postgres -v admin) psql -U postgres \
    -c 'DROP DATABASE "database"'

  if [ $? -ne 0 ]; then
    echo "\033[0;31mDOWNLOAD FAILED\033[0m"
    return 1
  fi

  ssh ubuntu@test.celluloidheaven.net "pg_dumpall | gzip" |
    gunzip |
    docker exec -i $(find-docker-container postgres -v admin) psql -U postgres

  if [ $? -ne 0 ]; then
    echo "\033[0;31mDOWNLOAD FAILED\033[0m"
    return 1
  fi

  docker exec -i $(find-docker-container postgres -v admin) psql -U postgres \
    -c 'ALTER DATABASE "diagonal_production" RENAME TO "database"'

  if [ $? -ne 0 ]; then
    echo "\033[0;31mDOWNLOAD FAILED\033[0m"
    return 1
  fi

  docker-compose -f config/celluloidheaven.local/main.yml stop
  docker-compose -f config/celluloidheaven.local/main.yml up -d

  return 0
}

function download-celluloidheaven-production-data {
  cd $(project-path)

  docker stop $(find-docker-container "(backend|app)\." -v admin)

  docker exec -i $(find-docker-container postgres -v admin) psql -U postgres \
    -c 'DROP DATABASE "database"'

  if [ $? -ne 0 ]; then
    echo "\033[0;31mDOWNLOAD FAILED\033[0m"
    return 1
  fi

  ssh ubuntu@filmservice.net "pg_dumpall | gzip" |
    gunzip |
    docker exec -i $(find-docker-container postgres -v admin) psql -U postgres

  if [ $? -ne 0 ]; then
    echo "\033[0;31mDOWNLOAD FAILED\033[0m"
    return 1
  fi

  docker exec -i $(find-docker-container postgres -v admin) psql -U postgres \
    -c 'ALTER DATABASE "diagonal_production" RENAME TO "database"'

  if [ $? -ne 0 ]; then
    echo "\033[0;31mDOWNLOAD FAILED\033[0m"
    return 1
  fi

  docker-compose -f config/celluloidheaven.local/main.yml stop
  docker-compose -f config/celluloidheaven.local/main.yml up -d

  return 0
}

alias clr=restart-project

function generate-rails-object() {
  RESULT=$(
    docker exec -i -t $(find-docker-container "(backend|app)\." -v admin) \
      rails generate $@ | tee /dev/tty \
  )

  if [ $? -ne 0 ]; then
    echo "\033[0;31mGENERATE FAILED\033[0m"
    return 1
  fi

  FILES=$(
    echo $RESULT |
      grep -E '(create|identical|skip)' | # filter for created files
      sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | # remove colors
      sed -E "s/\s*(create|identical|skip)[\t ]*//" # remove garbage
  )

  PROJECT_PATH=$(project-path)
  for FILE in $(echo $FILES); do
    FILE=$(echo $FILE | sed -E 's/\r//')
    FILE_PATH="$(backend-path)/$FILE"
    if ! test -e $FILE_PATH; then
      FILE_PATH="$(backend-path)/app/$FILE"
    fi

    sudo chown leo: $FILE_PATH
    subl3 $FILE_PATH
  done
}

alias xg=generate-rails-object

function create-feature-branch() {
  git fetch
  if [ $? -ne 0 ]; then
    echo "\033[0;31mFETCH FAILED\033[0m"
    return 1
  fi

  git checkout origin/master
  if [ $? -ne 0 ]; then
    echo "\033[0;31mCHECKOUT FAILED\033[0m"
    return 1
  fi

  git checkout -b "feature/$1"
  if [ $? -ne 0 ]; then
    echo "\033[0;31mNEW BRANCH CHECKOUT FAILED\033[0m"
    return 1
  fi
}

alias q=create-feature-branch

function create-pull-request() {
  repo=$(
    git remote -v |
      grep push |
      sed -r "s/.*@(.*):(.*)\.git\s.*/http:\/\/\1\/\2/g"
  )

  chromium "$repo/compare/$(current_branch)?expand=1"
}

alias qr=create-pull-request

function merge-current-branch-to-staging() {
  branch=$(current_branch)

  if $(echo $branch | grep -e '-STAGING-TMP$'); then
    echo "\033[0;31mAlready on staging branch\033[0m"
  fi

  git fetch
  if [ $? -ne 0 ]; then
    echo "\033[0;31mFetch failed\033[0m"
    return 1
  fi

  git checkout origin/staging
  if [ $? -ne 0 ]; then
    echo "\033[0;31mFailed to checkout\033[0m"
    return 1
  fi

  git checkout -b "$branch-STAGING-TMP"
  if [ $? -ne 0 ]; then
    echo "\033[0;31mFailed to checkout new branch\033[0m"
    return 1
  fi

  git merge --no-edit "$branch"
  if [ $? -ne 0 ]; then
    echo "\033[0;31mAutomatica merge failed\033[0m"
    return 1
  fi

  complete-merge-current-branch-to-staging
}

function complete-merge-current-branch-to-staging() {
  branch=$(current_branch | sed -e 's/-STAGING-TMP$//g')

  git push origin "$branch-STAGING-TMP:staging"
  if [ $? -ne 0 ]; then
    echo "\033[0;31mPush failed\033[0m"
    return 1
  fi

  git checkout "$branch"
  if [ $? -ne 0 ]; then
    echo "\033[0;31mCheckout back failed\033[0m"
    return 1
  fi

  git branch -D "$branch-STAGING-TMP"
  if [ $? -ne 0 ]; then
    echo "\033[0;31mFailed to delete temporary branch\033[0m"
    return 1
  fi
}

alias qs=merge-current-branch-to-staging
alias qse=complete-merge-current-branch-to-staging
