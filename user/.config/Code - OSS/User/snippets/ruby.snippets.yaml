ruby:
  context: document().languageId == 'ruby'
  snippets:
    # definitions:
    #   context: document.getText().match('\s*\w+\s*')
    #   snippets:

    sentences:
      context: selection.precedingText().match('^\s*\w+$')
      snippets:
        def:
          trigger: d
          snippet: |-
            def $container{$1{}($2:args)}
              $0
            end
          placeholders:
            args:
              onBeforeLeave: |
                ({ placeholders: { container } }) => {
                  container.value = container.value.replace(/\(\)$/, '');
                };

        if:
          trigger: i
          snippet: |-
            if $1
              $0
            end

        return:
          trigger: r
          snippet: return

    keywords:
      snippets:
        initialize:
          trigger: ~def\s*$
          snippet: def initialize

        do:
          context: selection.precedingText().match('\S\s*\w+$')
          trigger: d
          snippet: |-
            do |$1|
              $0
            end

        throw:
          trigger: th
          snippet: 'throw StandardError.new("$0")'

    values:
      snippets:
        'true':
          trigger: t
          snippet: 'true'

        'false':
          trigger: f
          snippet: 'false'

        nil:
          trigger: n
          snippet: nil

    specs:
      context: document().uri.toString().match('_spec\.rb$')
      snippets:
        let:
          trigger: l
          snippet: let(:$1) { $0 }

        before:
          trigger: b
          snippet: |-
            before do
              $0
            end

        describe:
          trigger: de
          snippet: |-
            describe '$1' do
              $0
            end

        it:
          trigger: it
          snippet: |-
            it '$1' do
              $0
            end

        expect:
          trigger: e
          snippet: expect($1).to $0

        expect to receive:
          trigger: ~\).to\s*
          snippet: receive($1)

        expect anything:
          trigger: ea
          snippet: anything

        vcr:
          trigger: v
          snippet: ':vcr'

        vcr record:
          trigger: vr
          snippet: ':focus, :watch, vcr: { record: :all }'

        focus:
          trigger: ff
          snippet: ':focus'

    debug:
      snippets:
        puts:
          trigger: p
          snippet: 'puts("XXXX $id #{$1}")'
          placeholders:
            id:
              onBeforeExpand: |
                ({ editor, document }) =>
                  require('path').basename(document.uri.fsPath) + ':' +
                  editor.selection.anchor.line

        quit:
          trigger: q
          snippet: 'throw StandardError.new("XXXX $id :(")'
          placeholders:
            id:
              onBeforeExpand: |
                ({ editor, document }) =>
                  require('path').basename(document.uri.fsPath) + ':' +
                  editor.selection.anchor.line

        binding.pry:
          trigger: bp
          snippet: binding.pry

        todo:
          trigger: xt
          snippet: '# @todo $0'

        prtodo:
          trigger: xp
          snippet: '# @prtodo $0'

rails:
  snippets:
    application config:
      trigger: rc
      snippet: Rails.application.config

    application config dot:
      trigger: ~(?<=Rails\.application\.config)$
      snippet: .