{
	// definitions

	"const": {
		"prefix": ["c"],
		"body": ["const $1 = $0;"],
		"description": "const",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"lambda": {
		"prefix": ["j"],
		"body": ["($1) => $2"],
		"description": "lambda",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"lambda-with-braces": {
		"prefix": ["jj"],
		"body": ["($1) => {$2}"],
		"description": "lambda with braces",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"function": {
		"prefix": ["fn"],
		"body": ["function $1($2) {", "  $0", "}"],
		"description": "function",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},

	// comments

	"pr todo": {
		"prefix": ["xp"],
		"body": ["// @prtodo $0"],
		"description": "pr todo",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},

	// print

	"console.log": {
		"prefix": ["l"],
		"body": ["console.log(\"XXXX $TM_FILENAME:$TM_LINE_NUMBER\", $0)"],
		"description": "console.log",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},

	// react

	"css": {
		"prefix": ["cs"],
		"body": ["css={css`$1`}"],
		"description": "css",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},

	// tests

	"define test": {
		"prefix": ["dt"],
		"body": [
			"import React from 'react';",
			"import { render } from '@testing-library/react';",
			"",
			"import $1 from './$1';",
			"",
			"describe('$1', () => {",
				"\tit('$2', () => {",
					"\t\tconst { container } = render(<$1 />);",
					"\t\texpect(container).toHaveTextContent('$3');$0",
				"\t});",
			"});",
			""
		],
		"description": "define test",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"define test with props": {
		"prefix": ["dp"],
		"body": [
			"import React from 'react';",
			"import { render } from '@testing-library/react';",
			"",
			"import $1 from './$1';",
			"",
			"describe('$1', () => {",
				"\tconst props = {};",
				"",
				"\tit('$2', () => {",
					"\t\tconst { container } = render(<$1 {...props} />);",
					"\t\texpect(container).toHaveTextContent('$3');$0",
				"\t});",
			"});",
			""
		],
		"description": "define test",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"define test with context": {
		"prefix": ["dc"],
		"body": [
			"import React from 'react';",
			"import { render } from '@testing-library/react';",
			"",
			"import mockFetch from 'utils/tests/mockFetch';",
			"import withContext from 'utils/tests/withContext';",
			"",
			"import Context from '../Shared/Context';",
			"import $1 from './$1';",
			"",
			"describe('$1', () => {",
				"\tconst Subject = withContext($1, Context, {",
				"",
				"\t});",
				"",
				"\tbeforeEach(() => {",
					"\t\tmockFetch([]);",
				"\t});",
				"",
				"\tit('$2', () => {",
					"\t\tconst { container } = render(<Subject />);",
					"\t\texpect(container).toHaveTextContent('$3');",
				"\t});",
			"});",
			""
		],
		"description": "define test with context",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"define test for hook": {
		"prefix": ["dh"],
		"body": [
			"import React from 'react';",
			"import { render } from '@testing-library/react';",
			"",
			"import $1 from './$1';",
			"",
			"describe('$1', () => {",
				"\tfunction Component() {",
					"\t\tconst $2 = $1();",
					"",
					"\t\treturn (",
						"\t\t\t<>",
							"\t\t\t\t$3",
						"\t\t\t</>",
					"\t\t);",
				"\t}",
				"",
				"\tit('$4', () => {",
					"\t\tconst { container } = render(<Component />);$0",
				"\t});",
			"});",
		],
		"description": "define test for hook",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},

	// test blocks

	"describe": {
		"prefix": ["de"],
		"body": ["describe('$1', () => {", "\t$0", "});"],
		"description": "describe",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"it": {
		"prefix": ["it"],
		"body": ["it('$1', () => {", "\t$0", "});"],
		"description": "it",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
	"beforeEach": {
		"prefix": ["be"],
		"body": ["beforeEach(() => {", "\t$0", "});"],
		"description": "beforeEach",
		"scope": "javascript,typescript,javascriptreact,typescriptreact"
	},
}