typescript:
  context: document().languageId.match("^(type|java)script(react)?$")
  snippets:
    definitions:
      context: document().getText().match('^\s*\w+\s*$')
      snippets:
        function:
          trigger: d
          context: document().uri.toString().match('(?<!\.test)\.ts$')
          snippet: |-
            export $1default function $2:name($3) {
              return (
                $0
              );
            }
          placeholders:
            name:
              onExpand: |
                ({ document }) => (
                  document.uri.toString().match('/([^/]+).ts$') || []
                )[1]
    keywords:
      snippets:
        this:
          trigger: ~\.$
          snippet: this.

        async:
          trigger: as
          snippet: async $0

        async shortcut:
          trigger: a
          context: |
            cursor.followingText().match('^[ \t]*(\(|function)') ||
              cursor.precedingText().match('(export\s+(default\s+)?)\w+$')
          snippet: async $0

        await:
          trigger: a
          context: |
            cursor.followingText().match('^(?!(function|\())') &&
              !cursor.precedingText().match('(export\s+(default\s+)?)\w+$')
          snippet: await $0

        await to async:
          trigger: "~await\\s*$"
          snippet: async $0

        await promise:
          trigger: ap
          snippet: await new Promise((resolve) => $1)

        new promise:
          trigger: np
          snippet: new Promise((resolve) => $1)

        typeof:
          trigger: ~(?<!\.\s*)(?<=[(<\[\s={])to$
          snippet: typeof $0

        instanceof:
          trigger: ~(?<!\.\s*)(?<=[(<\[\s=])io$
          snippet: instanceof $0

        import star:
          auto: true
          trigger: ~import\s+\*$
          snippet: import * as $0:value{value}
          placeholders:
            value:
              onBeforeExpand: |
                ({ document, cursor, debug }) => {
                  const line = document.lineAt(cursor.end.line);
                  const match = line.text.match(/".*\/([^\/]+)("|')/);

                  if (match) {
                    return match[1];
                  }
                }

        import expansion:
          auto: true
          trigger: ~(?<=import\s+\w+\s*,)\s*$
          snippet: " { $1 }"

        define and call double arrow async callback:
          trigger: ca
          snippet: (async () => {$0})()

        define and call double arrow callback:
          trigger: cc
          snippet: (() => {$0})()

        quick double arrow callback with body:
          trigger: ~(?<=([:=(,|&[]|={|=\{|return)\s*)\/$
          snippet: ($1:element) => {$0}
          placeholders:
            element:
              onBeforeExpand: |
                ({ document, cursor, extensions: { user } }) => {
                  const text =
                    document
                      .lineAt(cursor.start.line)
                      .text
                      .substring(0, cursor.start.character);

                  const match = text.match(/(\w+)\.\w+\($/)

                  if (!match) {
                    return ;
                  }

                  return user.pluralize.singular(match[1]);
                }

        quick double arrow callback:
          trigger: ~(?<=([:=(,|&[]|={|=\{|return)\s*)$
          snippet: ($1:element) => $0
          placeholders:
            element:
              onBeforeExpand: |
                ({ document, cursor, extensions: { user } }) => {
                  const text =
                    document
                      .lineAt(cursor.start.line)
                      .text
                      .substring(0, cursor.start.character);

                  const match = text.match(/(\w+)\.\w+\($/)

                  if (!match) {
                    return ;
                  }

                  return user.pluralize.singular(match[1]);
                }

        quick double arrow for callback:
          trigger: ~(?<=[)]\s*)$
          snippet: " => $0"

        quick braces for double arrow callback:
          trigger: ~(?<=\)\s*=>\s*)$
          snippet: |-
            {
              $0
            }

        const in for:
          context: cursor.precedingText().match('for\s*\(\w+$')
          trigger: c
          snippet: const $0

    root:
      context: cursor.precedingText().match('(^|;)\s*\w+$')
      snippets:
        import:
          trigger: im
          snippet: 'import $1 from "$2";'

        import relative:
          trigger: ir
          snippet: 'import $1{object} from "./$file/$1{object}";'
          placeholders:
            file:
              onBeforeExpand: ({ document, debug }) =>
                document.uri.toString().match('/([^/]+)\\.\\w+$')[1]

        import star:
          trigger: is
          snippet: 'import * as $1{value} from "$2";'

        import local:
          trigger: il
          snippet: 'import $1:value{value} from "./$folder/$2:file";'
          placeholders:
            folder:
              onBeforeExpand: |
                ({ document, debug }) =>
                  document.uri.toString().match('/([^/]+)\\.\\w+$')[1]
            value:
              onLeave: |
                ({ debug, placeholders: { value, file } }) => {
                  if (!value.value.includes('{')) {
                    file.value = value.value.trim();
                  }
                }

    root exports:
      context: |
        cursor.precedingText().match(
          '(^|\n)(export\s+)?(default\s+)?(async\s+)?\w+$'
        )
      snippets:
        export:
          trigger: e
          snippet: export $0

        export const:
          trigger: ec
          snippet: export const $1 = $0

        export default const:
          trigger: edc
          snippet: export default const $1 = $0

        export type:
          trigger: et
          snippet: export type $1 = $0

        type props:
          trigger: tp
          snippet: |-
            type Props = {
              $0
            }

        export default type:
          trigger: edt
          snippet: export default type $1 = $0

        export default:
          trigger: ed
          snippet: export default $0

        reexport default:
          trigger: ee
          snippet: export { default } from "./lib/$2:file"
          placeholders:
            file:
              onExpand: |
                ({ document }) => (
                  document.uri.toString().match('/([^/]+).tsx?$') || []
                )[1]

        reexport all:
          trigger: ea
          snippet: export * from "./lib/$2:file"
          placeholders:
            file:
              onExpand: |
                ({ document }) => (
                  document.uri.toString().match('/([^/]+).tsx?$') || []
                )[1]

        export default shortcut:
          trigger: d
          snippet: default $0
          context: |
            cursor.precedingText().match('(^|\n)(export\s+)\w+$')

        type:
          trigger: t
          snippet: type $1 = $0

    function:
      context: cursor.precedingText().match('(^|\n)(export\s+)?(default\s+)?(async\s+)?\s*\w+$')
      trigger: fn
      snippet: |-
        function $1($2)$typeContainer{: $3:typeValue} {
          $0
        }
      placeholders:
        typeValue:
          onLeave: |
            ({ debug, placeholders: { typeContainer, typeValue } }) => {
              debug(typeContainer.value);
              if (typeContainer.value === ': ') {
                typeContainer.value = '';
              }
            }

    function constant:
      trigger: cf
      snippet: |-
        const $1 = ($2)$typeContainer{: $3:typeValue} => {
          $0
        }
      placeholders:
        typeValue:
          onLeave: |
            ({ debug, placeholders: { typeContainer, typeValue } }) => {
              debug(typeContainer.value);
              if (typeContainer.value === ': ') {
                typeContainer.value = '';
              }
            }

    root exportable sentences:
      context: cursor.precedingText().match('(^|\n)(export\s+)?(default\s+)?\s*\w+$')
      snippets:
        const assignment:
          trigger: c
          snippet: const $1 = $0
          context: cursor.followingText().match('^[ ]*(\n|$)')

        const:
          trigger: c
          snippet: const $0
          context: cursor.followingText().match('^[ ]*\S')

        let assignment:
          trigger: le
          snippet: let $1 = $0;
          context: cursor.followingText().match('^[ ]*(\n|$)')

        let:
          trigger: le
          snippet: let $0
          context: cursor.followingText().match('^[ ]*\S')

    syntax helpers:
      snippets:
        else:
          trigger: ~(?<=^\s*}\s*)e$
          auto: true
          snippet: |-
            else {
              $0
            }

        else if:
          trigger: ~(?<=^\s*}\s*)i$
          auto: true
          snippet: |-
            else if($1) {
              $0
            }

        catch:
          trigger: ~(?<=^\s*}\s*)c$
          auto: true
          snippet: |-
            catch ($1{error}) {
              $0
            }

        finally:
          trigger: ~(?<=^\s*}\s*)f$
          auto: true
          snippet: |-
            finally {
              $0
            }

    root sentences:
      context: cursor.precedingText().match('(^|\n)\s*\w+$')
      snippets:
        if:
          trigger: i
          snippet: |-
            if ($1) {
              $0:value
            }
          placeholders:
            value:
              onBeforeExpand: |
                ({ selection, utils: { removeTrailingLines } }) =>
                  removeTrailingLines(selection)

        if not:
          trigger: in
          snippet: |-
            if (!$1) {
              $0
            }

        for:
          trigger: f
          snippet: |-
            for ($1) {
              $0
            }
        for classic:
          trigger: ff
          snippet: |-
            for (let $1{index} = 0; $1{index} < $2; $1{index} ++) {
              $0
            }
        for of:
          trigger: fo
          snippet: |-
            for (const $2:element of $1:elements{elements}) {
              $0
            }
          placeholders:
            element:
              onBeforeFocus: |
                ({ placeholders: { elements }, extensions: { user } }) => {
                  return user.pluralize.singular(elements.value);
                }
        for in:
          trigger: fi
          snippet: |-
            for (const $2:element in $1:elements{elements}) {
              $0
            }
          placeholders:
            element:
              onBeforeFocus: |
                ({ placeholders: { elements }, extensions: { user } }) => {
                  return user.pluralize.singular(elements.value);
                }
        while:
          trigger: wh
          snippet: |-
            while ($1) {
              $0
            }

        try catch:
          trigger: tr
          snippet: |-
            try {
              $0
            } catch($1{error}) {
              $2
            }

        throw error:
          trigger: te
          snippet: throw $1{error};

        throw new error:
          trigger: tn
          snippet: throw new Error("$1");

        throw:
          trigger: th
          snippet: throw $0;

        quit:
          trigger: q
          snippet: throw new Error("XXXX $id");
          placeholders:
            id:
              onBeforeExpand: |
                ({ cursor, document }) =>
                  require('path').basename(document.uri.fsPath) + ':' +
                  cursor.anchor.line

    sentences:
      context: cursor.precedingText().match('(^|[;\)\]\{\}])\s+\w+$')
      snippets:
        return value:
          trigger: r
          snippet: return $0

        return null:
          trigger: rn
          snippet: return null

        return false:
          trigger: rf
          snippet: return false

        return true:
          trigger: rt
          snippet: return true

        return result:
          trigger: rr
          snippet: return result

        return promise:
          trigger: rp
          snippet: return await new Promise((resolve) => $1);

        continue:
          trigger: co
          snippet: continue

        break:
          trigger: b
          snippet: break

    chain functions:
      context: cursor.precedingText().match('\.\s*\w+$')
      snippets:
        map:
          trigger: m
          snippet: map($0)

        forEach:
          trigger: f
          snippet: forEach($0)

        filter:
          trigger: fi
          snippet: filter($0)

        reduce:
          trigger: r
          snippet: reduce((result, $2) => $0, $1{initial})

        includes:
          trigger: i
          snippet: includes($1)

        includes 2:
          trigger: iu
          snippet: includes($1)

        indexOf:
          trigger: io
          snippet: indexOf($1)

        reduce array:
          trigger: ra
          snippet: reduce((result, $1) => ([...result, $0]), [])

        reduce object:
          trigger: ro
          snippet: reduce((result, $1) => ({...result, $0}), {})

        reduce object value:
          trigger: rr
          snippet: "reduce((result, [key, value]) => ({...result, [key]: value}), {})"

        length:
          trigger: l
          snippet: length

        startWith:
          trigger: sw
          snippet: startsWith($1)

        endWith:
          trigger: ew
          snippet: endsWith($1)

        toString:
          trigger: ts
          snippet: toString()

    calls:
      snippets:
        object keys:
          trigger: ok
          snippet: Object.keys($1)

        object values:
          trigger: ov
          snippet: Object.values($1)

        object entries:
          trigger: oe
          snippet: Object.entries($1)

        object fromEntries:
          trigger: of
          snippet: Object.fromEntries($1)

        object has own property:
          trigger: ho
          snippet: Object.prototype.hasOwnProperty.call($1, $2)

        json stringify:
          trigger: js
          snippet: JSON.stringify($1)

        json parse:
          trigger: jp
          snippet: JSON.parse($1)

    comparisons:
      context: |
        cursor.precedingText().match('(\w\s|\]|\)) *\w*$') &&
          !cursor.precedingText().match('return\s+\w*$')
      snippets:
        is:
          trigger: i
          snippet: === $0

        is not 2:
          trigger: ii
          snippet: "!== $0"

        is not:
          trigger: n
          snippet: "!== $0"

        is null:
          trigger: in
          snippet: === null

        is not null:
          trigger: inn
          snippet: "!== null"

        is true:
          trigger: it
          snippet: "=== true"

        is not true:
          trigger: int
          snippet: "!== true"

        is false:
          trigger: if
          snippet: "=== false"

        is not false:
          trigger: inf
          snippet: "!== false"

        is undefined:
          trigger: iu
          snippet: "=== undefined"

        is not undefined:
          trigger: inu
          snippet: "!== undefined"

        is zero:
          trigger: iz
          snippet: "=== 0"

        is not zero:
          trigger: inz
          snippet: "!== 0"

        is string:
          trigger: is
          snippet: '=== "$0"'

        is not string:
          trigger: ins
          snippet: '!== "$0"'

    values:
      context: cursor.precedingText().match('([:=(,|&[?]|={|=>|=\{|return|await)\s*\w*$')
      snippets:
        undefined:
          trigger: u
          snippet: undefined

        "null":
          trigger: n
          snippet: "null"

        await import:
          trigger: ai
          snippet: await import("$1")

        "true":
          trigger: t
          snippet: "true"

        "false":
          trigger: f
          snippet: "false"

        object:
          trigger: ~(?<=type\s*\w+\s*=\s*)$
          snippet: |-
            {
              $0
            }
          order: 1

        new error:
          trigger: ne
          snippet: new Error($1)

        new promise:
          trigger: np
          snippet: new Promise((resolve) => $1)

        promise all:
          trigger: pa
          snippet: Promise.all($1)

    breaking strings:
      snippets:
        single quote:
          context: cursor.precedingText().match('\n\s*\'.*?$')
          trigger: "~ $"
          snippet: " ' +\n'"
          order: 1
        double quote:
          context: cursor.precedingText().match('\n\s*\".*?$')
          trigger: "~ $"
          snippet: " \" +\n\""
          order: 1
        back quote:
          context: cursor.precedingText().match('\n\s*\`.*?$')
          trigger: "~ $"
          snippet: " ` +\n`"
          order: 1

    parameters auto:
      trigger: ~const args$
      snippet: "const args: Parameters<typeof $1>[0]"

    types:
      context: cursor.precedingText().match('([:<,[]|=>|(?<!\|\s*)\||(?<!&\s*)&|<(?!=\s))\s*\w+$')
      snippets:
        unknown:
          trigger: un
          snippet: unknown

        undefined to unknown:
          trigger: undefined
          snippet: unknown

        boolean:
          trigger: b
          snippet: boolean

        string:
          trigger: s
          snippet: string

        "null":
          trigger: "n"
          snippet: "null"
          order: 1

        number:
          trigger: nu
          snippet: number

        null to number:
          trigger: "null"
          snippet: number

        void:
          trigger: v
          snippet: void

        void callback:
          trigger: void
          snippet: () => void

        record:
          trigger: R
          snippet: Record<string, $0>

        promise:
          trigger: P
          snippet: Promise<$1>

        parameters:
          trigger: Pa
          snippet: Parameters<typeof $1>

    stdlib:
      snippets:
        setTimeout:
          snippets:
            function:
              trigger: so
              snippet: setTimeout($1, $2{100})

    debug:
      snippets:
        todo:
          trigger: xt
          snippet: // @todo $0

        todo tests:
          trigger: xtt
          snippet: // @todo tests

        prtodo:
          trigger: xp
          snippet: // @prtodo $0{tests}

        sentences:
          context: cursor.precedingText().match('(^|\n|{)\s*\w+$')
          snippets:
            log:
              trigger: l
              snippet: console.log("XXXX $id ", $1)
              placeholders:
                id:
                  onBeforeExpand: |
                    ({ cursor, document }) =>
                      require('path').basename(document.uri.fsPath) + ':' +
                      cursor.anchor.line

            console.log:
              trigger: cl
              snippet: console.log($1)

            console.warn:
              trigger: cw
              snippet: console.warn($1)

            console.error:
              trigger: ce
              snippet: console.error($1)

    other:
      snippets:
        type expansion:
          trigger: ~(?<=(^|\s)type\s+\w+\s*)$
          snippet: " = {\n  $0\n}"

        parameters:
          trigger: ~Promise<$
          snippet: Parameters<typeof $0

        partial:
          trigger: ~Parameters<typeof\s$
          snippet: Partial<$0

        return type:
          trigger: ~Record<string,\s$
          snippet: ReturnType<$0
          order: 1

        preventDefault:
          trigger: ~\.pd$
          snippet: .preventDefault()

        stopPropagation:
          trigger: ~\.sp$
          snippet: .stopPropagation()

        className:
          trigger: cn
          snippet: className

        # object continuation:
        #   # context: |
        #   #   cursor.precedingText().match('({|,)\s*\w$') &&
        #   #   cursor.followingText().match('^\s*(\w+:|})')
        #   context: |
        #     !cursor.precedingText().match('=>\s*{\s*\w$') &&
        #     cursor.precedingText().match('({|,)\s*\w$') &&
        #     cursor.followingText().match('^\s*(\w+:|})')
        #   trigger: ~(?<=\s*\w)$
        #   snippet: "$1$container{: $2:value},"
        #   auto: true
        #   order: -1
        #   placeholders:
        #     value:
        #       onLeave: |
        #         ({ placeholders: { container, value } }) => {
        #           if (value.value === "") {
        #             container.value = container.value.replace(/:\s*$/, "");
        #           }
        #         }
