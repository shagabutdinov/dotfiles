go:
  context: document().languageId.match("^go$")
  snippets:
    empty prefix and postfix:
      context: cursor.precedingText().match('\n\s*\w+$') &&
        cursor.followingText().match('^\s*(\n|$)')
      snippets:
        type:
          trigger: ~^\s*t$
          order: 1
          snippet: type $1

        for:
          context: cursor.followingText().match('^\s*\n')
          trigger: ~(?<=^\s*)f$
          order: 1
          snippet: |-
            for $1 {
              $0
            }

        for classic:
          trigger: ~(?<=^\s*)fo$
          order: 1
          snippet: |-
            for $1:name{index} := $2{0}; $1:name{index} < $3; $1:name{index} ++ {
              $0
            }

        for copy:
          trigger: ~(?<=^\s*)fc$
          snippet: |-
            $1 := make([]$2, len($3))
            for $4{index}, $5{value} := range $3 {
              $1[$4{index}] = $5{value}$6
            }

        for map:
          trigger: ~(?<=^\s*)fm$
          snippet: |-
            $1 := make([]$2, len($3))
            for $4{index}, $5{value} := range $3 {
              $1[$4{index}] = $6
            }

        for keys:
          trigger: ~(?<=^\s*)fk$
          snippet: |-
            $1 := make([]$2, len($3))
            $4{index} := 0
            for $5{key} := range $3 {
              $1[$4{index}] = $5{key}
              $4{index} ++
            }

        for index:
          trigger: ~(?<=^\s*)fi$
          snippet: |-
            for $1{index}, $3:value{value} := range $2:values{values} {
              $0
            }
          order: 1
          placeholders:
            value:
              onBeforeFocus: |
                ({ placeholders: { values }, extensions: { user } }) => {
                  return user.pluralize.singular(values.value) || values.value;
                }

    type struct:
      trigger: ~(?<=type\s+\w+\s+)s$
      auto: true
      snippet: |-
        struct {
          $0
        }

    type interface:
      trigger: ~(?<=type\s+\w+\s+)i$
      auto: true
      snippet: |-
        interface {
          $0
        }

    func:
      trigger: fn
      snippet: |-
        func $1:name($2) $3 {
          $0
        }

    for index helper:
      trigger: ~for i$
      snippet: |-
        for $1{index}, $3:value{value} := range $2:values{values}
      placeholders:
        value:
          onBeforeFocus: |
            ({ placeholders: { values }, extensions: { user } }) => {
              return user.pluralize.singular(values.value) || values.value;
            }
      order: 3

    for range:
      trigger: ~(?<=^\s*)fr$
      snippet: |-
        for _, $2:value{value} := range $1:values{values} {
          $0
        }
      placeholders:
        value:
          onBeforeFocus: |
            ({ placeholders: { values }, extensions: { user } }) => {
              return user.pluralize.singular(values.value);
            }

    break:
      trigger: b
      snippet: break

    continue:
      trigger: c
      snippet: continue

    "nil":
      trigger: "n"
      snippet: "nil"

    "not nil":
      trigger: "nn"
      snippet: "!= nil"

    nil comma:
      context: cursor.followingText().match('^\s*[\w\(]')
      trigger: "n"
      snippet: "nil, "
      order: 1

    "false":
      trigger: f
      snippet: "false"

    "true":
      trigger: t
      snippet: "true"

    float64 continuation:
      trigger: "false"
      snippet: float64

    float64 type:
      trigger: ~(?<=(\w\s|\))\s*)(?<!return\s+)f$
      snippet: float64
      order: 1

    types:
      context: cursor.precedingText().match('(\S.*[ ]*|\(|\[|\]|\))\w+$')
      snippets:
        int type:
          trigger: i
          snippet: int
          order: 1

        bool type:
          trigger: b
          snippet: bool
          order: 1

        string:
          trigger: s
          snippet: string

        error type:
          trigger: e
          snippet: error
          order: 1

        float64:
          trigger: ff
          snippet: float64

    return:
      trigger: r
      snippet: return $0

    return nil:
      trigger: rn
      snippet: return nil

    return false:
      trigger: rf
      snippet: return false

    return true:
      trigger: rt
      snippet: return true

    return result:
      trigger: rr
      snippet: return result

    define variable:
      trigger: ~;$
      auto: true
      snippet: ":= "

    var:
      trigger: v
      snippet: "var "

    var error continuation:
      trigger: ~var\s+$
      snippet: var err error

    var error:
      trigger: ve
      snippet: var err error

    range:
      trigger: ~(?<=for\s+\w+(,\s+\w+)?\s*:?=)\s*$
      snippet: " range "

    equal range:
      trigger: ~(?<=for\s+\w+(,\s+\w+)?\s*)\s*$
      snippet: " := range "

    for underscore:
      trigger: ~(?<=for\s+)$
      snippet: "_, $1 := range "

    define error assignment:
      trigger: ~,\s*$
      snippet: ", err := "

    struct:
      trigger: ~^ds$
      snippet: |-
        type $1:name struct {
          $0
        }
      placeholders:
        name:
          onBeforeExpand: |-
            ({ document, extensions: { user } }) => {
              const fileName = document.uri.fsPath.match(/\/([^/\.]*)[^/]*$/)[1];
              const name = user.camelCase(fileName);
              return name[0].toLocaleUpperCase() + name.substring(1)
            }

    interface:
      trigger: ~^di$
      snippet: |-
        type $1:name interface {
          $0
        }
      placeholders:
        name:
          onBeforeExpand: |-
            ({ document }) => {
              const fileName = document.uri.fsPath.match(/\/([^/\.]*)[^/]*$/)[1];
              return fileName[0].toLocaleUpperCase() + fileName.substring(1)
            }

    define package:
      context: cursor.bofToStartText().match('^\s*\w+$')
      trigger: ~^d$
      snippet: "package $package\n\n"
      order: 2
      placeholders:
        package:
          onBeforeExpand: |-
            ({ document }) =>
              document.uri.fsPath.match(/\/([^/]*?)\/[^/]*$/)[1]

    define package main:
      context: cursor.bofToStartText().match('^\s*\w+$')
      trigger: ~^dm$
      snippet: "package main\n\n"

    define struct:
      context: |
        !cursor.bofToStartText().match('\n\s*type ')
      trigger: ~^d$
      snippet: |
        type $1:name struct {
          $0
        }
      placeholders:
        name:
          onBeforeExpand: |-
            ({ document, extensions: { user } }) => {
              const fileName = document.uri.fsPath.match(/\/([^/\.]*)[^/]*$/)[1];
              const name = user.camelCase(fileName);
              return name[0].toLocaleUpperCase() + name.substring(1)
            }

    define func struct:
      context: |
        cursor.bofToStartText().match('\n\s*type ') ||
          cursor.bofToStartText().match('func \((.*?)\) \w+\(')
      order: 1
      trigger: ~^d$
      snippet: |-
        func ($struct{struct}) $2{name}($3) $4 {
          $0
        }
      placeholders:
        struct:
          onBeforeExpand: |
            ({ document, cursor, debug, extensions: { user } }) => {
              const expr = /(?<=func \()(.*?)(?=\) \w+\()/;
              const backwardDefinition = user.getText(document, expr, {
                before: cursor.anchor,
              });

              if (backwardDefinition) {
                return backwardDefinition;
              }

              const globalDefinition = user.getText(document, expr);
              if (globalDefinition) {
                return globalDefinition;
              }

              const name = user.getText(
                document,
                /(?<=type\s+)(\w+)(?=\s+struct)/,
                { before: cursor.anchor },
              );

              if (name) {
                return `${user.camelCase(name)} *${name}`;
              }

              return ;
            }

    define func struct marshal json:
      context: |
        cursor.bofToStartText().match('\n\s*type ') ||
          cursor.bofToStartText().match('func \((.*?)\) \w+\(')
      order: 1
      trigger: ~^dmj$
      snippet: |-
        // MarshalJSON converts value to json
        func ($struct{struct}) MarshalJSON() ([]byte, error) {
          $0
          return result, nil
        }
      placeholders:
        struct:
          onBeforeExpand: |
            ({ document, cursor, debug, extensions: { user } }) => {
              const expr = /(?<=func \()(.*?)(?=\) \w+\()/;
              const backwardDefinition = user.getText(document, expr, {
                before: cursor.anchor,
              });

              if (backwardDefinition) {
                return backwardDefinition;
              }

              const globalDefinition = user.getText(document, expr);
              if (globalDefinition) {
                return globalDefinition;
              }

              const name = user.getText(
                document,
                /(?<=type\s+)(\w+)(?=\s+struct)/,
                { before: cursor.anchor },
              );

              if (name) {
                return `${user.camelCase(name)} *${name}`;
              }

              return ;
            }

    define func struct unmarshal json:
      context: |
        cursor.bofToStartText().match('\n\s*type ') ||
          cursor.bofToStartText().match('func \((.*?)\) \w+\(')
      order: 1
      trigger: ~^duj$
      snippet: |-
        // MarshalJSON converts value from json
        func ($struct{struct}) UnmarshalJSON(data []byte) error {
          $0
          return nil
        }
      placeholders:
        struct:
          onBeforeExpand: |
            ({ document, cursor, debug, extensions: { user } }) => {
              const expr = /(?<=func \()(.*?)(?=\) \w+\()/;
              const backwardDefinition = user.getText(document, expr, {
                before: cursor.anchor,
              });

              if (backwardDefinition) {
                return backwardDefinition;
              }

              const globalDefinition = user.getText(document, expr);
              if (globalDefinition) {
                return globalDefinition;
              }

              const name = user.getText(
                document,
                /(?<=type\s+)(\w+)(?=\s+struct)/,
                { before: cursor.anchor },
              );

              if (name) {
                return `${user.camelCase(name)} *${name}`;
              }

              return ;
            }

    json for field:
      context: cursor.bofToStartText().match('\n\s*type ')
      trigger: ~(?<=\w+\s+)j$
      snippet: |-
        `json:"$1:key"`
      placeholders:
        key:
          onBeforeExpand: |
            ({ document, cursor, debug, extensions: { user } }) =>
              user.snakeCase(
                user.getText(
                  document,
                  /(\w+)(?=.*?j$)/,
                  { before: cursor.anchor }
                )
              );

    this:
      trigger: ~(?<!=\w)\.$
      snippet: $this
      placeholders:
        this:
          onBeforeExpand: |
            ({ document, cursor, debug, extensions: { user } }) => {
              const expr = /(?<=func \()(\w+)(?=\s+\*?\w+\) \w+\()/;
              const backwardDefinition = user.getText(document, expr, {
                before: cursor.anchor,
              });

              if (backwardDefinition) {
                return backwardDefinition;
              }

              return "";
            }

    define test:
      context: document().uri.toString().match("_test.go$")
      trigger: d
      snippet: |
        func Test$1(test *testing.T) {
          $0
        }
      order: 1

    define test initial:
      context: document().uri.toString().match("_test.go$")
      trigger: ~^d$
      snippet: |
        package $package

        import (
          "os"
          "testing"

          "github.com/stretchr/testify/assert"
        )

        func TestMyFunc(t *testing.T) {
          assert.Equal(t, true, false)
        }
      order: 3
      placeholders:
        package:
          onBeforeExpand: |-
            ({ document }) =>
              document.uri.fsPath.match(/\/([^/]*?)\/[^/]*$/)[1]

    # if err not nil return err:
    #   trigger: ir
    #   snippet: |-
    #     if err != nil {
    #       return $1err
    #     }

    if err not nil return karma:
      trigger: ie
      snippet: |-
        if err != nil {
          return $1karma.$3Format(err, "failed to $2")
        }

    if err not nil return karma (alias):
      trigger: ir
      snippet: |-
        if err != nil {
          return $1karma.$3Format(err, "failed to $2")
        }

    if err not nil panic:
      trigger: ip
      snippet: |-
        if err != nil {
          panic(err)
        }

    if:
      trigger: i
      snippet: |-
        if $1 {
          $0
        }

    if empty:
      trigger: iem
      snippet: |-
        if len($1) == 0 {
          $0
        }

    if not empty:
      trigger: ine
      snippet: |-
        if len($1) != 0 {
          $0
        }

    if not:
      trigger: in
      snippet: |-
        if !$1 {
          $0
        }

    is nil:
      trigger: ~(?<=(\w|\))\s*)in$
      snippet: "== nil"
      order: 1

    else:
      context: |
        !cursor.followingText().match('^\s*\n')
      auto: true
      trigger: ~(?<=})\s*e$
      snippet: " else"

    else with brackets:
      context: cursor.followingText().match('^\s*\n')
      auto: true
      trigger: ~(?<=})\s*e$
      snippet: " else {\n  $0\n}"

    else if:
      context: |
        !cursor.followingText().match('^\s*\n')
      auto: true
      trigger: ~(?<=})\s*i$
      snippet: " else if"

    else if with brackets:
      context: cursor.followingText().match('^\s*\n')
      auto: true
      trigger: ~(?<=})\s*i$
      snippet: " else if $1 {\n  $0}"

    log:
      trigger: l
      snippet: fmt.Println("XXXX $id $key{value} =", $1:value{value})
      placeholders:
        id:
          onBeforeExpand: |
            ({ cursor, document }) =>
              require('path').basename(document.uri.fsPath) + ':' +
                cursor.anchor.line
        value:
          onDocumentChange: |
            ({ cursor, document, placeholders: { key, value }}) =>
              key.value = value.value

    log debug:
      trigger: ld
      snippet: lorg.Debug("$1")

    log trace:
      trigger: lt
      snippet: lorg.Trace("$1")

    log info:
      trigger: li
      snippet: lorg.Info("$1")

    log warning:
      trigger: lw
      snippet: lorg.Warning("$1")

    log error:
      trigger: le
      snippet: lorg.Error("$1")

    log fatal:
      trigger: lf
      snippet: lorg.Fatal($1)

    len:
      trigger: ~(?<=([^\w\s]|if)\s*)l$
      snippet: len($1)
      order: 1

    log structure:
      trigger: lv
      snippet: fmt.Printf("XXXX $id %+v\n", $1)
      placeholders:
        id:
          onBeforeExpand: |
            ({ cursor, document }) =>
              require('path').basename(document.uri.fsPath) + ':' +
              cursor.anchor.line

    assert equal:
      trigger: ae
      snippet: assert.Equal(t, $1{expected}, $2{actual})

    errors new:
      trigger: en
      snippet: errors.New("$1")

    err:
      context: cursor.followingText().match('^\s*:?=')
      trigger: ~(?<=,\s*)e$
      snippet: err
      order: 2

    # language

    append:
      trigger: ~(?<==\s*)a$
      snippet: append($1:list, $2:value)
      placeholders:
        list:
          onBeforeExpand: |-
            ({ document, cursor, extensions: { user } }) =>
              user.getText(
                document,
                /\S+(?=\s*=\s*a$)/,
                { before: cursor.anchor },
              );

    map:
      trigger: m
      snippet: map[$1:key]$2:value

    map string:
      trigger: ms
      snippet: map[string]$1:value

    map value:
      context: cursor.precedingText().match('(=|\()\s*m$')
      trigger: m
      snippet: map[$1:key]$2:value\{\}
      order: 1

    map string value:
      context: cursor.precedingText().match('(=|\()\s*ms$')
      trigger: ms
      snippet: map[string]$1:value\{\}
      order: 1

    make:
      trigger: ma
      snippet: make([]$1{type}, $2{len})
      order: 1

    slice:
      trigger: ss
      auto: true
      snippet: "[]"

    exit:
      trigger: q
      snippet: panic(":(")

    panic:
      trigger: p
      snippet: panic("$1")

    package:
      trigger: ~^p$
      snippet: |
        package $package
      order: 1
      placeholders:
        package:
          onBeforeExpand: |-
            ({ document }) =>
              document.uri.fsPath.match(/\/([^/]*?)\/[^/]*$/)[1]

    package main:
      trigger: ~^pm$
      snippet: |
        package main
      order: 1

    karma format:
      trigger: kf
      snippet: karma.$2Format(err, "$1")

    karma describe:
      trigger: kd
      snippet: |
        karma.
          Describe("$1{value}", $2{$1{value}}).
          Reason($3)

    karma describe continuation:
      context: cursor.precedingText().match('\.\s*d$')
      trigger: d
      snippet: Describe("$1{value}", $2{$1{value}}).
      order: 1

    karma reason:
      context: cursor.precedingText().match('\.\s*r$')
      trigger: r
      snippet: Reason("$1")
      order: 1

    comment:
      trigger: c
      context: |
        cursor.followingText().match('^\s*(func|type)')
      snippet: // $name{name} $1{TBD}
      order: 1
      placeholders:
        name:
          onBeforeExpand: |
            ({ document, cursor, extensions: { user } }) => {
              const definition = user.getText(
                document,
                /((?<=func ((.*?) )?)\w+(?=\()|(?<=type )\w+)/,
                { after: cursor.anchor },
              );

              if (definition) {
                return definition;
              }

              const globalDefinition = user.getText(document, expr);

              if (globalDefinition) {
                return globalDefinition;
              }

              const name = user.getText(
                document,
                /(?<=type\s+)(\w+)(?=\s+struct)/,
                { before: cursor.anchor },
              );

              if (name) {
                return `${user.camelCase(name)} *${name}`;
              }

              return ;
            }

    time duration:
      trigger: td
      snippet: time.Duration

    time date continuation:
      trigger: ~time.Duration$
      snippet: time.Date(2000$1, $2{1}, $3{1}, 0, 0, 0, 0, time.UTC)

    time date:
      trigger: tda
      snippet: time.Date(2000$1, $2{1}, $3{1}, 0, 0, 0, 0, time.UTC)

    time time:
      trigger: tt
      snippet: time.Time

    time hour:
      trigger: th
      snippet: time.Hour

    strconv itoa:
      trigger: ia
      snippet: strconv.Itoa($1)

    strconv atoi:
      trigger: ai
      snippet: strconv.Atoi($1)

    strconv parse float:
      trigger: pf
      snippet: strconv.ParseFloat($1, 64)

    strconv format float:
      trigger: fl
      snippet: strconv.FormatFloat($1, 'f', $2{2}, 64)

    strings has prefix:
      trigger: shp
      snippet: strings.HasPrefix($1, $2)

    strings split:
      trigger: sp
      snippet: strings.Split($1, $2)

    strings replace:
      trigger: sr
      snippet: strings.Replace($1, $2, $3, $4{-1})

    strings upper:
      trigger: su
      snippet: strings.ToUpper($1)

    strings lower:
      trigger: sl
      snippet: strings.ToLower($1)

    os read file:
      trigger: or
      snippet: os.ReadFile($1)

    os open:
      trigger: oo
      snippet: os.Open($1)

    read csv:
      trigger: rc
      snippet: |
        file, err := os.Open($1)
        if err != nil {
          return nil, karma.Format(err, "failed to open file")
        }

        defer file.Close()

        csvReader := csv.NewReader(file)
        data, err := csvReader.ReadAll()
        if err != nil {
          return nil, karma.Format(err, "failed to read csv data")
        }

    regexp must compile:
      trigger: rmc
      snippet: regexp.MustCompile($1)
