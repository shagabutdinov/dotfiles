ruby:
  context: document().languageId == 'ruby'
  snippets:
    # definitions:
    #   context: document.getText().match('\s*\w+\s*')
    #   snippets:

    sentences:
      context: selection.precedingText().match('^\s*\w+$')
      snippets:
        def:
          context: |
            !document().uri.fsPath.match('_spec.rb') &&
              selection.precedingText().match('^\s+\w+$')
          trigger: d
          snippet: |-
            def $container{$1{}($2:args)}
              $0
            end
          placeholders:
            args:
              onBeforeLeave: |
                ({ placeholders: { container } }) => {
                  container.value = container.value.replace(/\(\)$/, '');
                };

        def initialize:
          context: |
            !document().uri.fsPath.match('_spec.rb') &&
              selection.precedingText().match('^\s+\w+$')
          trigger: di
          snippet: |-
            def initialize$container{($1:args)}
              $0
            end
          placeholders:
            args:
              onBeforeLeave: |
                ({ placeholders: { container } }) => {
                  container.value = container.value.replace(/\(\)$/, '');
                };

        test case:
          context: |
            document().uri.fsPath.match('_spec.rb') &&
              selection.precedingText().match('^\w+$')
          trigger: d
          snippet: |-
            describe $1:subject{Subject} do
              $0
            end

          placeholders:
            subject:
              onBeforeExpand: |
                ({ document, env, extensions: { user: { camelCase } } }) =>
                  document.uri.fsPath
                    .replace(env.workspace.rootPath + '/spec/', '')
                    .replace(/\w+\//, '')
                    .replace('_spec.rb', '')
                    .split('/')
                    .map((part) => camelCase(part, { pascalCase: true }))
                    .join('::')

        test:
          context: |
            document().uri.fsPath.match('_spec.rb') &&
              selection.precedingText().match('^\s+\w+$')
          trigger: d
          snippet: |-
            it '$1' do
              $0
            end

        if:
          trigger: i
          snippet: |-
            if $1
              $0
            end

        if not:
          trigger: in
          snippet: |-
            if !$1
              $0
            end

        if nil:
          trigger: ii
          snippet: |-
            if $1.nil?
              $0
            end

        if not nil:
          trigger: ini
          snippet: |-
            if !$1.nil?
              $0
            end

        if empty:
          trigger: ie
          snippet: |-
            if $1.empty?
              $0
            end

        else if:
          trigger: ei
          snippet: |-
            elsif $1
              $0

        return:
          trigger: r
          snippet: return

        return nil:
          trigger: rn
          snippet: return nil

    keywords:
      snippets:
        initialize:
          trigger: ~def\s*$
          snippet: def initialize

        do:
          context: selection.precedingText().match('\S\s*\w+$')
          trigger: d
          snippet: |-
            do$container{ |$1:args|}
              $0
            end
          placeholders:
            args:
              onBeforeLeave: |-
                ({ placeholders: { container } }) => {
                  container.value = container.value.replace(/\s*\|\|$/, '');
                };

        raise:
          trigger: ra
          snippet: 'raise StandardError.new("$0")'

    stdlib:
      snippets:
        args:
          trigger: ~(?<=\{\s+)$
          snippet: "|$1|"

        inline cycle:
          trigger: ~(?<=\.\w+\s+)$
          snippet: |-
            do$container{ |$1:args|}
              $0
            end
          placeholders:
            args:
              onBeforeLeave: |-
                ({ placeholders: { container } }) => {
                  container.value = container.value.replace(/\s*\|\|$/, '');
                };

        each:
          trigger: ~(?<=\.)e$
          snippet: each $0

        map:
          trigger: ~(?<=\.)m$
          snippet: map $0

        file write:
          trigger: fw
          snippet: File.write($1, $2)

        file read:
          trigger: fr
          snippet: File.read($1)

        file join:
          trigger: fj
          snippet: File.join($1)

        file basename:
          trigger: fb
          snippet: File.basename($1)


    values:
      snippets:
        'true':
          trigger: t
          snippet: 'true'

        'false':
          trigger: f
          snippet: 'false'

        nil:
          trigger: n
          snippet: nil

    specs:
      context: document().uri.toString().match('_spec\.rb$')
      snippets:
        let:
          trigger: l
          snippet: let(:$1) { $0 }

        before:
          trigger: b
          snippet: |-
            before do
              $0
            end

        describe:
          trigger: de
          snippet: |-
            describe '$1' do
              $0
            end

        it:
          trigger: it
          snippet: |-
            it '$1' do
              $0
            end

        instance double:
          trigger: id
          snippet: instance_double($1)

        allow:
          trigger: a
          snippet: allow($1).to $0

        expect:
          trigger: e
          snippet: expect($1).to $0

        expect to receive:
          trigger: ~(?<=\).to)\s+r$
          snippet: ' receive($1)'

        expect to equal:
          trigger: ~(?<=\).to)\s+$
          snippet: ' eq($1)'
          order: 1

        expect receive with:
          trigger: ~(?<=receive\(.*?\)\s*)\.w$
          snippet: '.with($1)'

        expect and return:
          trigger: ~(?<=(receive|with)\(.*?\)\s*)\.ar$
          snippet: '.and_return($1)'

        expect and raise:
          trigger: ~(?<=(receive|with)\(.*?\)\s*)\.ara$
          snippet: '.and_raise($1)'

        expect anything:
          trigger: ea
          snippet: anything

        focus:
          trigger: "~(?<=(it|describe) '.*?')$"
          snippet: ', :focus'

        remove focus:
          trigger: '~, :focus$'
          snippet: ''

        focus for do:
          trigger: "~(?<=(it|describe) '.*?') do$"
          snippet: ', :focus do'

        remove focus for do:
          trigger: "~(?<=(it|describe) '.*?'), :focus do$"
          snippet: ' do'

        watch:
          trigger: "~(?<=(it|describe) '.*?',.*:js)$"
          snippet: ', :focus, :watch'

        remove watch:
          trigger: '~, :focus, :watch$'
          snippet: ''
          order: 1

        watch for do:
          trigger: "~(?<=(it|describe) '.*?', :js) do$"
          snippet: ', :focus, :watch do'

        remove watch for do:
          trigger: '~, :focus, :watch do$'
          snippet: ' do'
          order: 1

        described class:
          trigger: dc
          snippet: described_class

        time zone parse:
          trigger: tp
          snippet: Time.zone.parse($1)

        time zone parse now:
          trigger: tt
          snippet: Time.zone.parse('2021-01-01')

        time zone parse continuation:
          trigger: ~Time.zone.parse\('2021-01-01'\)$
          snippet: Time.zone.parse('2021-01-07')

        thousand:
          trigger: "1"
          snippet: "1_000"

        complete hash key:
          context: cursor.followingText().match('^\s*,')
          trigger: "~(?<=\\w+:)\\s*$"
          snippet: " '$value'"
          placeholders:
            value:
              onBeforeExpand: |
                ({ cursor, document, extensions: { user } }) =>
                  user
                    .snakeCase(
                      user.getText(
                        document,
                        /(\w+)(?=:\s*$)/,
                        { before: cursor.anchor }
                      )
                    )
                    .toUpperCase()

        complete hash key with comma:
          context: cursor.followingText().match('^\s*\n')
          trigger: "~(?<=\\w+:)\\s*$"
          snippet: " '$value',"
          placeholders:
            value:
              onBeforeExpand: |
                ({ cursor, document, extensions: { user } }) =>
                  user
                    .snakeCase(
                      user.getText(
                        document,
                        /(\w+)(?=:\s*$)/,
                        { before: cursor.anchor }
                      )
                    )
                    .toUpperCase()

    debug:
      snippets:
        puts:
          trigger: p
          snippet: 'puts("XXXX $id #{$1}")'
          placeholders:
            id:
              onBeforeExpand: |
                ({ cursor, document }) =>
                  require('path').basename(document.uri.fsPath) + ':' +
                  cursor.anchor.line

        puts test:
          trigger: pt
          snippet: 'puts("XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX $id")'
          placeholders:
            id:
              onBeforeExpand: |
                ({ cursor, document }) =>
                  require('path').basename(document.uri.fsPath) + ':' +
                  cursor.anchor.line

        quit:
          trigger: q
          snippet: 'raise StandardError.new("XXXX $id :(")'
          placeholders:
            id:
              onBeforeExpand: |
                ({ cursor, document }) =>
                  require('path').basename(document.uri.fsPath) + ':' +
                  cursor.anchor.line

        sleep:
          trigger: sl
          snippet: sleep($1{16})

        binding.pry:
          trigger: bp
          snippet: binding.pry

        todo:
          trigger: xt
          snippet: '# @todo $0'

        prtodo:
          trigger: xp
          snippet: '# @prtodo $0{tests}'

    rails:
      snippets:
        application config:
          trigger: rc
          snippet: Rails.application.config

        application config dot:
          trigger: ~(?<=Rails\.application\.config)$
          snippet: .

    logger:
      snippets:
        logger debug:
          trigger: ld
          snippet: logger.debug($1)

        logger info:
          trigger: li
          snippet: logger.info($1)

        logger warn:
          trigger: lw
          snippet: logger.warn($1)

        logger error:
          trigger: le
          snippet: logger.error($1)

        logger fatal:
          trigger: lf
          snippet: logger.fatal($1)

    vcr:
      snippets:
        vcr record all:
          trigger: '~:vcr$'
          snippet: ':focus, :watch, vcr: { record: :all }'

        vcr:
          trigger: '~:focus, :watch, vcr: \{ record: :all \}$'
          snippet: ':vcr'

    other:
      snippets:
        JSON.parse:
          trigger: jp
          snippet: JSON.parse($1)

        JSON.parse symbolize_names:
          trigger: jpp
          snippet: "JSON.parse($1, symbolize_names: true)"

        to_json:
          trigger: tj
          snippet: to_json

        to_sym:
          trigger: "y"
          snippet: to_sym

        heredoc:
          trigger: T
          snippet: |-
            <<~$1{TEXT}
              $0
            $1{TEXT}

        is nil:
          auto: true
          trigger: ~\.\?$
          snippet: .nil?

        empty?:
          trigger: ~\.em$
          snippet: .empty?
