react query:
  context: |
    document().languageId.match("^(type|java)script(react)?$") &&
      document().uri.toString().match("[tj]sx?$")

  snippets:
    useQuery:
      trigger: uq
      snippet: |-
        const { data: $1, isFetching, error } = useQuery({
          queryKey: [$2],
          queryFn: () => $3($4)
        });
      onExpand:
        command: imports.add
        args:
          value: useQuery
          from: "@tanstack/react-query"

    useQuery args:
      trigger: uqa
      snippet: |-
        const { data: $1, isFetching, error } = useQuery({
          queryKey: [$2, $4] as const,
          queryFn: async ({ queryKey: [, args] }) => $3(args),
        });
      onExpand:
        command: imports.add
        args:
          value: useQuery
          from: "@tanstack/react-query"

    useMutation:
      trigger: umu
      snippet: |-
        const { mutate: $1, isPending, error } = useMutation({
          mutationKey: [$2],
          mutationFn: $3
        });
      onExpand:
        command: imports.add
        args:
          value: useMutation
          from: "@tanstack/react-query"

    useQueryClient:
      trigger: uqc
      snippet: const queryClient = useQueryClient();
      onExpand:
        command: imports.add
        args:
          value: useQueryClient
          from: "@tanstack/react-query"
