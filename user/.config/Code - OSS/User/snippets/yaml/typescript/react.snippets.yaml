typescript:
  context: |
    document().languageId.match("^(type|java)script(react)?$") &&
      document().uri.toString().match("[tj]sx?$")
  snippets:
    definitions:
      context: document().getText().match('^\s*\w+\s*$')
      snippets:
        define component:
          trigger: d
          context: document().uri.toString().match('(?<!\.test)\.tsx$')
          snippet: |-
            import React from "react";

            // @prtodo tests
            export default function $1:name{Component}($args{{ $2:list }: Props}) {
              return (
                $0{<>TBD</>}
              );
            }
            $props{
            type Props = {
              $keys$3
            }}
          placeholders:
            name:
              onExpand: |
                ({ document }) => (
                  document.uri.toString().match('/([^/]+).tsx$') || []
                )[1]
            list:
              onLeave: |
                ({ debug, placeholders: { args, props, keys } }) => {
                  if (args.value === "{  }: Props") {
                    args.value = "";
                    props.value = "";
                  } else {
                    keys.value =
                      args
                        .value
                        .match(/\{\s*(.*)\s*\}/)[1]
                        .split(",")
                        .map((value) => `${value.trim()}: unknown;`)
                        .join("\n")
                  }
                }

        hook:
          trigger: d
          context: document().uri.toString().match('/use.*?(?<!\.test)\.ts$')
          order: 1
          snippet: |-
            // @prtodo tests
            export default function $1:name($2): $3 {
              $0
            }
          placeholders:
            name:
              onExpand: |
                ({ document }) => (
                  document.uri.toString().match('/([^/]+).tsx?$') || []
                )[1]

    react component props auto:
      trigger: ~const props:?\s*$
      snippet: "const props: React.ComponentProps<typeof $0>"
      order: 2

    react node:
      trigger: "~(?<=:\\s*|\\|\\s*)rn$"
      snippet: React.ReactNode
      order: 1

    a target blank:
      trigger: tb
      snippet: target="_blank" rel="noreferrer"
      order: 1

    a blank:
      trigger: ab
      snippet: <a href="$1" target="_blank" rel="noreferrer">$2</a>
      order: 1

    types:
      context: cursor.precedingText().match(':\s*\w+$')
      snippets:
        react component props:
          trigger: rcp
          snippet: React.ComponentProps<typeof $0>

    sentences:
      context: cursor.precedingText().match('\n[ ]*\w+$')
      snippets:
        # hooks

        useState:
          trigger: us
          snippet: const [$1:name{value}, $setter{setValue}] = useState$container{<$2:type>}($3)
          onExpand:
            command: imports.add
            args:
              value: useState
              from: react
          placeholders:
            name:
              onLeave: |
                ({ placeholders: { name, setter } }) => {
                  setter.value =
                    'set' +
                      name.value.substring(0, 1).toUpperCase() +
                      name.value.substring(1)
                }
            type:
              onLeave: |
                ({ debug, placeholders: { container } }) => {
                  if (container.value === '<>') {
                    container.value = '';
                  }
                }

        useEffect:
          trigger: ue
          snippet: |-
            useEffect(() => {
              $0
            }, [$1])
          onExpand:
            command: imports.add
            args:
              value: useEffect
              from: react

        useRef:
          trigger: ur
          snippet: const $1 = useRef$container{<$2:type>}($3)
          onExpand:
            command: imports.add
            args:
              value: useRef
              from: react
          placeholders:
            type:
              onLeave: |
                ({ debug, placeholders: { container } }) => {
                  if (container.value === '<>') {
                    container.value = '';
                  }
                }

        useContext:
          trigger: uc
          snippet: const $1 = useContext($2{Context})
          onExpand:
            command: imports.add
            args:
              value: useContext
              from: react

        useMemo:
          trigger: um
          snippet: const $1 = useMemo(() => $2, [$3])
          onExpand:
            command: imports.add
            args:
              value: useMemo
              from: "react"

    expressions:
      context: cursor.precedingText().match('([:=(,|&[]|={|=>|=\{|return)\s*\w*$')

      snippets:
        useState:
          trigger: us
          snippet: useState$container{<$2:type>}($3)
          onExpand:
            command: imports.add
            args:
              value: useState
              from: react
          placeholders:
            type:
              onLeave: |
                ({ debug, placeholders: { container } }) => {
                  if (container.value === '<>') {
                    container.value = '';
                  }
                }

        useRef:
          trigger: ur
          snippet: useRef$container{<$2:type>}($3)
          onExpand:
            command: imports.add
            args:
              value: useRef
              from: react
          placeholders:
            type:
              onLeave: |
                ({ debug, placeholders: { container } }) => {
                  if (container.value === '<>') {
                    container.value = '';
                  }
                }

        useMemo:
          trigger: um
          snippet: useMemo(() => $2, [$3])
          onExpand:
            command: imports.add
            args:
              value: useMemo
              from: react

    assignment:
      context: cursor.precedingText().match('([}")]|<\w+)\s+\w+=?$')
      trigger: ~(?<=\s\w+)=?$
      snippet: ={$1:variable}
      order: -1
      placeholders:
        variable:
          onBeforeExpand: |
            ({ document, debug, cursor, extensions: { user } }) =>
              user.getText(
                document,
                /(\w+)(?==?)$/,
                { before: cursor.start }
              );

    tags:
      context: cursor.precedingText().match('([?:(>}]|return)\s*<$')
      trigger: ~(?<=^\s+)<$
      auto: true
      snippet: <$1:tag{tag}>$0$container{</$close{tag}>}
      placeholders:
        tag:
          onPlaceholderChange: |
            ({ env, placeholders: { tag, container, close } }) => {
              if (tag.value === '>') {
                tag.value = '';
                close.value = '';
                setTimeout(() => env.commands.executeCommand('snippets.nextTab'), 68);
              } else if (tag.value.endsWith("/")) {
                container.value = '';
              } else {
                close.value = tag.value.replace(/(?<=\w+)\s+.*/, '');
              }
            }

    css:
      context: |
        cursor.precedingText().match('(;|`|:\w+\s*\{)\s*\w+$') &&
        cursor.followingText().match('^\s*([\w-]*:|`|\})')
      snippets:

        text-transform:
          trigger: tt
          snippet: "text-transform: $1{uppercase};"

        cursor pointer:
          trigger: cp
          snippet: "cursor: pointer;"

        cursor default:
          trigger: cd
          snippet: "cursor: default;"

        display flex:
          trigger: df
          snippet: "display: flex;"

        display block:
          trigger: db
          snippet: "display: block;"

        flex direction:
          trigger: fd
          snippet: "flex-direction: $1{column};"

        align items:
          trigger: aa
          snippet: "align-items: $1{center};"

        align items center:
          trigger: ai
          snippet: "align-items: $1{center};"

        justify content space between:
          trigger: jc
          snippet: "justify-content: $1{space-between};"

        gap:
          trigger: g
          snippet: "gap: $1{4}px;"

        font-weight:
          trigger: fw
          snippet: "font-weight: $1{bold};"

        font-size:
          trigger: fs
          snippet: "font-size: $1{10}px;"

        text-overflow:
          trigger: to
          snippet: "text-overflow: $1{ellipsis};"

        font-family:
          trigger: ff
          snippet: "font-family: $1;"

        box-shadow:
          trigger: bs
          snippet: "box-shadow: $1;"

        background-color:
          trigger: bc
          snippet: "background-color: $1;"

        padding:
          trigger: p
          snippet: "padding: 2$1px;"

        padding-bottom:
          trigger: pb
          snippet: "padding-bottom: 2$1px;"

        padding-top:
          trigger: pt
          snippet: "padding-top: 2$1px;"

        padding-left:
          trigger: pl
          snippet: "padding-left: 2$1px;"

        position-relative:
          trigger: pr
          snippet: "position: relative;"

        margin:
          trigger: m
          snippet: "margin: 2$1px;"

        margin-bottom:
          trigger: mb
          snippet: "margin-bottom: 2$1px;"

        margin-top:
          trigger: mt
          snippet: "margin-top: 2$1px;"

        margin-left:
          trigger: ml
          snippet: "margin-left: 2$1px;"

        margin-right:
          trigger: mr
          snippet: "margin-right: 2$1px;"

        border:
          trigger: b
          snippet: "border: 2$1px;"

        border-bottom:
          trigger: bb
          snippet: "border-bottom: 2$1px solid $2{black};"

        border-top:
          trigger: bt
          snippet: "border-top: 2$1px solid $2{black};"

        border-left:
          trigger: bl
          snippet: "border-left: 2$1px solid $2{black};"

        border-right:
          trigger: br
          snippet: "border-right: 2$1px solid $2{black};"

        width:
          trigger: w
          snippet: "width: 2$1px;"

        max width:
          trigger: mw
          snippet: "max-width: 2$1px;"

        height:
          trigger: h
          snippet: "height: 2$1px;"

        max height:
          trigger: mh
          snippet: "max-height: 2$1px;"

        min height:
          trigger: mh
          snippet: "min-height: 16$1px;"

        text-align:
          trigger: ta
          snippet: "text-align: $1{right};"

    css helpers:
      snippets:
        padding-right:
          trigger: "~position\\: relative;$"
          snippet: "padding-right: 2$1px;"

    css values:
      context: cursor.precedingText().match('\s[a-z-]+:\s*\w+$')
      snippets:

        var:
          trigger: v
          snippet: var($1)
          order: 1

        none:
          trigger: no
          snippet: none
          order: 2

        roll 2:
          trigger: "2"
          snippet: "4"

        roll 4:
          trigger: "4"
          snippet: "8"

        roll 8:
          trigger: "8"
          snippet: "16"

        roll 16:
          trigger: "16"
          snippet: "32"

        roll 32:
          trigger: "32"
          snippet: "64"

        roll 64:
          trigger: "64"
          snippet: "128"

        roll 128:
          trigger: "128"
          snippet: "256"
