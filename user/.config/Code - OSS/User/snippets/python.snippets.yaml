python:
  context: document().languageId == 'python'
  snippets:

    define method:
      trigger: d
      snippet: |
        def $1$container{(self, $2:args)}:
            $0
      placeholders:
        args:
          onBeforeLeave: |-
            ({ placeholders: { container }, debug }) => {
              container.value = container.value.replace(
                /(?<=\w+)\(self,\s*\)$/,
                '(self)'
              );
            };

    define class method:
      trigger: dc
      snippet: |
        @classmethod
        def $1$container{(cls, $2:args)}:
            $0
      placeholders:
        args:
          onBeforeLeave: |-
            ({ placeholders: { container }, debug }) => {
              container.value = container.value.replace(
                /(?<=\w+)\(self,\s*\)$/,
                '(self)'
              );
            };

    define init method:
      trigger: di
      snippet: |
        def __init__(self, $1:args):
            $0

    define cls:
      trigger: c
      snippet: |
        class $1:
            $0
      context: |
        cursor.precedingText().match('(\n|^)\w+$') &&
          cursor.followingText().match('^.*(\n|$)')

    define error class:
      trigger: ce
      snippet: |
        class $1{Error}(Exception):
            pass
      context: |
        cursor.precedingText().match('(\n|^)[ \t]*\w+$') &&
          cursor.followingText().match('^.*(\n|$)')

    print:
      trigger: p
      snippet: print("XXXX $id", $1)
      placeholders:
        id:
          onBeforeExpand: |
            ({ cursor, document }) =>
              require('path').basename(document.uri.fsPath) + ':' +
                cursor.anchor.line

    typings:
      snippets:
        return type:
          trigger: ~\)\s*$
          snippet: ") -> "

        typing optional:
          trigger: to
          snippet: typing.Optional[$1]

        typing union:
          trigger: tu
          snippet: typing.Union[$1]

        typing tuple:
          trigger: tt
          snippet: typing.Tuple[$1]

        typing callable:
          trigger: tc
          snippet: typing.Callable[[$1], $2]

        typing any:
          trigger: ta
          snippet: typing.Any

        typing float:
          trigger: "False"
          snippet: float

        typing str:
          trigger: "~self\\.$"
          snippet: str

        typing ignore:
          trigger: ti
          snippet: "# type: ignore"

        definitions:
          context: cursor.precedingText().match('(\w+:|->)[\t ]*\w+$')
          snippets:
            typing float:
              trigger: f
              snippet: float
              order: 1

            typing int:
              trigger: i
              snippet: int
              order: 1

            typing str:
              trigger: s
              snippet: str
              order: 1

            typing bool:
              trigger: b
              snippet: bool
              order: 1

    controls sequences:
      snippets:
        lambda:
          trigger: la
          snippet: "lambda $1: $0"

        lambda (alias ll):
          trigger: ll
          snippet: "lambda $1: $0"
          auto: true

        return:
          trigger: r
          snippet: return $0

        return none:
          trigger: rn
          snippet: return None

        return false:
          trigger: rf
          snippet: return False

        return true:
          trigger: rt
          snippet: return True

        return result:
          trigger: rr
          snippet: return result

        try catch:
          trigger: tr
          snippet: |
            try:
                $0
            except $1{Exception} as error:
                $2

        on blank line:
          context: |
            cursor.precedingText().match('\n\s*\w+$') &&
              cursor.followingText().match('^\s*\n')
          snippets:
            if:
              trigger: i
              snippet: |
                if $1:
                    $0

            if not:
              trigger: in
              snippet: |
                if not $1:
                    $0

            for:
              trigger: "~(?<=^\\s*)f$"
              order: 1
              snippet: |
                for $1:
                    $0

            for in:
              trigger: fi
              snippet: |
                for $1 in $2:
                    $0

            continue:
              trigger: co
              snippet: continue

    values:
      snippets:
        none:
          trigger: n
          snippet: None
        "false":
          trigger: f
          snippet: "False"
        "true":
          trigger: t
          snippet: "True"

    operators:
      snippets:
        is none:
          trigger: in
          snippet: is None
          context: cursor.precedingText().match('\w[ \t]+\w+$')
        is not none:
          trigger: inn
          snippet: is not None

        not in:
          trigger: ni
          snippet: not in $0

    len:
      trigger: l
      snippet: len($1)

    self:
      trigger: s
      snippet: self.

    quit:
      trigger: q
      snippet: raise Exception($1{":("})

    raise exception:
      trigger: re
      snippet: raise Exception("$1")

    raise custom error:
      trigger: ra
      snippet: raise $1("$2")

    logger debug:
      trigger: ld
      snippet: self.logger.debug(f"$0")

    logger info:
      trigger: li
      snippet: self.logger.info(f"$0")

    logger warning:
      trigger: lw
      snippet: self.logger.warning(f"$0")

    logger error:
      trigger: le
      snippet: self.logger.error(f"$0")

    logger fatal:
      trigger: lf
      snippet: self.logger.fatal(f"$0")


