// Place your key bindings in this file to override the defaults
[
  {
    "key": "ctrl+u ctrl+tab",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "\t"
    }
  },
  {
    "key": "ctrl+alt+t",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "refactoring.typescript.openTestFile",
          "context": [
            "document().uri.toString().match('(?<!\\.test)\\.[tj]sx?$')",
          ]
        },
        {
          "command": "refactoring.typescript.openCodeFile",
          "context": [
            "document().uri.toString().match('(?<=\\.test)\\.[tj]sx?$')",
          ]
        },
        {
          "command": "refactoring.ruby.openTestFile",
          "context": [
            "document().uri.toString().match('(?<!\\_spec)\\.rb$')",
          ]
        },
        {
          "command": "refactoring.ruby.openCodeFile",
          "context": [
            "document().uri.toString().match('\\_spec\\.rb$')",
          ]
        },
        {
          "command": "refactoring.go.openTestFile",
          "context": [
            "document().uri.toString().match('(?<!\\_test)\\.go$')",
          ]
        },
        {
          "command": "refactoring.go.openCodeFile",
          "context": [
            "document().uri.toString().match('\\_test\\.go$')",
          ]
        }
      ]
    }
  },
  {
    "key": "alt+r",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "refactoring.typescript.openPath",
          "context": [
            "document().uri.toString().match('\\.[tj]sx?$')",
          ]
        }
      ]
    }
  },
  {
    "key": "alt+shift+r",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "refactoring.typescript.openParent",
          "context": [
            "document().uri.toString().match('.[tj]sx?$')",
          ]
        }
      ]
    }
  },
  {
    "key": "ctrl+u r",
    "command": "workbench.action.reloadWindow"
  },
  {
    "key": "ctrl+alt+shift+f12",
    "command": "scope.print"
  },
  {
    "key": "ctrl+u ctrl+j",
    "command": "workbench.action.editor.changeLanguageMode",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+u ctrl+y",
    "command": "editor.action.formatDocument",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+u y",
    "command": "editor.action.formatSelection",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m ctrl+n",
    "command": "editor.action.defineKeybinding",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+u ctrl+enter",
    "command": "rest-client.request",
    "when": "editorTextFocus"
  },
  // case conversion
  {
    "key": "ctrl+=",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "commands": [
            {
              "command": "editor.emmet.action.incrementNumberByOne",
              "context": [
                "selection.precedingText().match('(\\W|^)\\d+$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^\\d+')",
                ")",
              ]
            },
            {
              "command": "extension.changeCase.upperFirst",
              "context": [
                "selection.precedingText().match('(\\W|^)[a-z]\\w*$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^[a-z]\\w*')",
                ")",
              ]
            },
            {
              "command": "extension.changeCase.upper",
              "context": [
                "selection.precedingText().match('(\\W|^)[A-Z]\\w*$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^[A-Z]\\w*')",
                ")",
              ]
            },
          ],
          "context": "selection().isEmpty"
        },
        {
          "commands": [
            {
              "command": "editor.emmet.action.incrementNumberByOne",
              "context": "selection.text().match('^\\d+$')",
            },
            {
              "command": "extension.changeCase.upperFirst",
              "context": "selection.text().match('^[a-z].*$')",
            },
            {
              "command": "extension.changeCase.upper",
            },
          ],
          "context": "!selection().isEmpty"
        },
      ],
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+-",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "commands": [
            {
              "command": "editor.emmet.action.decrementNumberByOne",
              "context": [
                "selection.precedingText().match('(\\W|^)\\d+$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^\\d+')",
                ")",
              ]
            },
            {
              "commands": [
                {
                  "command": "extension.changeCase.lower"
                },
                {
                  "command": "extension.changeCase.upperFirst"
                },
              ], // shit!
              "context": [
                "selection.precedingText().match('(\\W|^)[A-Z]*$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^[A-Z]\\w*')",
                ")",
              ]
            },
            {
              "command": "extension.changeCase.lower",
              "context": [
                "selection.precedingText().match('(\\W|^)[A-Z]\\w*$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^[A-Z]\\w*')",
                ")",
              ]
            },
          ],
          "context": "selection().isEmpty"
        },
        {
          "commands": [
            {
              "command": "editor.emmet.action.decrementNumberByOne",
              "context": "selection.text().match('^\\d+$')",
            },
            {
              "commands": [
                {
                  "command": "extension.changeCase.lower"
                },
                {
                  "command": "extension.changeCase.upperFirst"
                },
              ], // shit!
              "context": "selection.text().match('^[A-Z].*$')",
            },
            {
              "command": "extension.changeCase.lower",
            },
          ],
          "context": "!selection().isEmpty"
        },
      ],
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+=",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "commands": [
            {
              "command": "editor.emmet.action.incrementNumberByTen",
              "context": [
                "selection.precedingText().match('(\\W|^)\\d+$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^\\d+')",
                ")",
              ]
            },
            {
              "command": "extension.changeCase.camel",
              "context": [
                "selection.precedingText().match('(\\W|^)\\w+$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^\\w+')",
                ")",
              ]
            },
          ],
          "context": "selection().isEmpty"
        },
        {
          "commands": [
            {
              "command": "editor.emmet.action.incrementNumberByTen",
              "context": "selection.text().match('^\\d+$')",
            },
            {
              "command": "extension.changeCase.camel",
              "context": "selection.text().match('^\\w+$')",
            },
          ],
          "context": "!selection().isEmpty"
        },
      ],
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+-",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "commands": [
            {
              "command": "editor.emmet.action.decrementNumberByTen",
              "context": [
                "selection.precedingText().match('(\\W|^)\\d+$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^\\d+')",
                ")",
              ]
            },
            {
              "command": "extension.changeCase.snake",
              "context": [
                "selection.precedingText().match('(\\W|^)\\w+$') || (",
                "  selection.precedingText().match('\\W*$') && ",
                "  selection.followingText().match('^\\w+')",
                ")",
              ]
            },
          ],
          "context": "selection().isEmpty"
        },
        {
          "commands": [
            {
              "command": "editor.emmet.action.incrementNumberByTen",
              "context": "selection.text().match('^\\d+$')",
            },
            {
              "command": "extension.changeCase.snake",
              "context": "selection.text().match('^\\w+$')",
            },
          ],
          "context": "!selection().isEmpty"
        },
      ],
    },
    "when": "textInputFocus"
  },
  // splitting
  {
    "key": "enter",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "nesting.split",
          "context": [
            "selection().isEmpty &&",
            "(selection.precedingText().match('[\\{\\(\\[\\<]$') &&",
            "  selection.followingText().match('^\\s*\\S')) ||",
            "(selection.followingText().match('^[\\}\\)\\]\\>]') &&",
            "    selection.precedingText().match('\\S\\s*$')) &&",
            "nesting.current() &&",
            "(selection().active.isEqual(nesting.current().start) || ",
            "selection().active.isEqual(nesting.current().end))"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "\n  "
          },
          "context": [
            "selection.precedingText().match('[\\{\\(\\[\\<]') &&",
            "selection.followingText().match('[\\}\\)\\]\\>]') &&",
            "nesting.current() && (",
            "  selection().active.line == nesting.current().start.line ||",
            "  selection().active.line == nesting.current().end.line",
            ")"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "\n"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // {
  //   "key": "enter",
  //   "command": "editor.action.insertSnippet",
  //   "args": {
  //     "snippet": "\n"
  //   },
  //   "when": "editorTextFocus"
  // },
  // character editing
  {
    "key": "alt+/",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "nesting.join",
          "context": [
            "selection().isEmpty &&",
            "selection.precedingText().match('[\\{\\(\\[\\<]$') &&",
            "selection.followingText().match('^$') &&",
            "nesting.current() &&",
            "selection().active.isEqual(nesting.current().start)"
          ]
        },
        {
          "command": "deleteRight"
        }
      ]
    },
    "when": "textInputFocus && !editorReadonly"
  },
  // word editing
  {
    "key": "alt+backspace",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "nesting.deleteLeft",
          "context": [
            "selection().isEmpty &&",
            "selection.precedingText().match('[\\)\\}\\]\\>\"\\'`]$') &&",
            "nesting.outerLeft() &&",
            "selection().active.isEqual(nesting.outerLeft().outerEnd)"
          ]
        },
        {
          "command": "deleteWordLeft"
        }
      ]
    },
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+/",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "nesting.deleteRight",
          "context": [
            "selection.followingText().match('^[\\(\\{\\[\\<\"\\'`]') &&",
            "selection().isEmpty &&",
            "nesting.outerRight() &&",
            "selection().active.isEqual(nesting.outerRight().outerStart)"
          ]
        },
        {
          "command": "deleteWordRight"
        }
      ]
    },
    "when": "textInputFocus && !editorReadonly"
  },
  // word part editing
  {
    "key": "ctrl+backspace",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "nesting.unwrapLeft",
          "context": [
            "selection().isEmpty &&",
            "selection.precedingText().match('[\\)\\}\\]\\>\"\\'`]$') &&",
            "nesting.outerLeft() &&",
            "selection().active.isEqual(nesting.outerLeft().outerEnd)"
          ]
        },
        {
          "command": "deleteWordPartLeft"
        }
      ]
    },
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+/",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "nesting.unwrapSelection",
          "context": [
            "!selection().isEmpty &&",
            "selection.text().match('^[\\(\\{\\[\\<\"\\'`].*[\\)\\}\\]\\>\"\\'`]$') &&",
            "nesting.outerRight(selection().start) &&",
            "selection().start.isEqual(",
            "  nesting.outerRight(selection().start).outerStart",
            ") && ",
            "nesting.outerLeft(selection().end) &&",
            "selection().end.isEqual(",
            "  nesting.outerLeft(selection().end).outerEnd",
            ")"
          ]
        },
        {
          "command": "nesting.unwrapRight",
          "context": [
            "selection().isEmpty &&",
            "selection.followingText().match('^[\\(\\{\\[\\<\"\\'`]') &&",
            "nesting.outerRight() &&",
            "selection().active.isEqual(nesting.outerRight().outerStart)"
          ]
        },
        {
          "command": "deleteWordPartRight"
        }
      ]
    },
    "when": "textInputFocus && !editorReadonly"
  },
  // TMP
  // word editing
  // {
  //   "key": "alt+backspace",
  //   "command": "deleteWordLeft",
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // {
  //   "key": "ctrl+alt+/",
  //   "command": "deleteWordRight",
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // word part editing
  // {
  //   "key": "ctrl+backspace",
  //   "command": "deleteWordPartLeft",
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // {
  //   "key": "ctrl+/",
  //   "command": "deleteWordPartRight",
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // nesting change: (
  {
    "key": "shift+9",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "commands": [
            {
              "command": "nesting.swapSelection",
              "args": {
                "into": [
                  "(",
                  ")"
                ]
              },
              "context": [
                "selection.text().match('^[\\{\\[\\<](.|\n)*[\\}\\]\\>]$') &&",
                "nesting.outerRight(selection().start) &&",
                "selection().start.isEqual(",
                "  nesting.outerRight(selection().start).outerStart",
                ") && ",
                "nesting.outerLeft(selection().end) &&",
                "selection().end.isEqual(",
                "  nesting.outerLeft(selection().end).outerEnd",
                ")"
              ]
            },
            {
              "command": "editor.action.insertSnippet",
              "args": {
                "snippet": "(${0:$TM_SELECTED_TEXT})"
              }
            }
          ],
          "context": "!selection().isEmpty"
        },
        {
          "command": "nesting.wrapRight",
          "args": {
            "into": [
              "(",
              ")"
            ]
          },
          "context": [
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "selection.followingText().match(",
            "  '^(\\w|[\\(\\{\\[\\<\"\\'`])'",
            ")"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "($0)"
          },
          "context": [
            "!selection.scope().match('(comment\\.|string)') && ",
            "selection.followingText().match('^(\\W|$)') &&",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*)$)')"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "("
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  {
    "key": "shift+0",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "(${0:$TM_SELECTED_TEXT})"
          },
          "context": [
            "selection.text().match('^[\\(\\{\\[\\<](.|\n)*[\\)\\}\\]\\>]$') &&",
            "nesting.outerRight(selection().start) &&",
            "selection().start.isEqual(",
            "  nesting.outerRight(selection().start).outerStart",
            ") && ",
            "nesting.outerLeft() &&",
            "selection().end.isEqual(",
            "  nesting.outerLeft(selection().end).outerEnd",
            ")"
          ]
        },
        {
          "command": "cursorRight",
          "context": [
            "selection.precedingText().match('\\(\\w*$') &&",
            "selection.followingText().match('^\\)') &&",
            "!selection.scope().match('(comment\\.|string)')"
          ]
        },
        {
          "command": "nesting.stealRight",
          "args": {
            "from": [
              "(",
              ")"
            ]
          },
          "context": [
            "selection.followingText().match('^[\\w\\.\\-\\/\\?!&\\(\\{\\[\\<\"\\'`]') &&",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "nesting.current().kind == '()' &&",
            "nesting.current().end.isEqual(nesting.continuationAt(selection().active))"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": ")"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // nesting change: {
  {
    "key": "shift+[",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "commands": [
            {
              "command": "nesting.swapSelection",
              "args": {
                "into": [
                  "{",
                  "}"
                ]
              },
              "context": [
                "selection.text().match('^[\\(\\[\\<](.|\n)*[\\)\\]\\>]$') &&",
                "nesting.outerRight(selection().start) &&",
                "selection().start.isEqual(",
                "  nesting.outerRight(selection().start).outerStart",
                ") && ",
                "nesting.outerLeft(selection().end) &&",
                "selection().end.isEqual(",
                "  nesting.outerLeft(selection().end).outerEnd",
                ")"
              ]
            },
            {
              "command": "editor.action.insertSnippet",
              "args": {
                "snippet": "{${0:$TM_SELECTED_TEXT}}"
              }
            }
          ],
          "context": "!selection().isEmpty"
        },
        {
          "command": "nesting.wrapRight",
          "args": {
            "into": [
              "{",
              "}"
            ]
          },
          "context": [
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "selection.followingText().match(",
            "  '^(\\w|[\\(\\{\\[\\<\"\\'`])'",
            ")"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "{$0}"
          },
          "context": [
            "!selection.scope().match('(comment\\.|string)') && ",
            "selection.followingText().match('^(\\W|$)') &&",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*)$)')"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "{"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  {
    "key": "shift+]",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "{${0:$TM_SELECTED_TEXT}}"
          },
          "context": [
            "selection.text().match('^[\\(\\{\\[\\<](.|\n)*[\\)\\}\\]\\>]$') &&",
            "nesting.outerRight(selection().start) &&",
            "selection().start.isEqual(",
            "  nesting.outerRight(selection().start).outerStart",
            ") && ",
            "nesting.outerLeft() &&",
            "selection().end.isEqual(",
            "  nesting.outerLeft(selection().end).outerEnd",
            ")"
          ]
        },
        {
          "command": "cursorRight",
          "context": [
            "selection.precedingText().match('\\{\\w*$') &&",
            "selection.followingText().match('^\\}') &&",
            "!selection.scope().match('(comment\\.|string)')"
          ]
        },
        {
          "command": "nesting.stealRight",
          "args": {
            "from": [
              "{",
              "}"
            ]
          },
          "context": [
            "selection.followingText().match('^[\\w\\.\\-\\/\\?!&\\(\\{\\[\\<\"\\'`]') &&",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "nesting.current().kind == '{}' &&",
            "nesting.current().end.isEqual(nesting.continuationAt(selection().active))"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "}"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // nesting change: [
  {
    "key": "[",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "commands": [
            {
              "command": "nesting.swapSelection",
              "args": {
                "into": [
                  "[",
                  "]"
                ]
              },
              "context": [
                "selection.text().match('^[\\(\\{\\<](.|\n)*[\\)\\}\\>]$') &&",
                "nesting.outerRight(selection().start) &&",
                "selection().start.isEqual(",
                "  nesting.outerRight(selection().start).outerStart",
                ") && ",
                "nesting.outerLeft(selection().end) &&",
                "selection().end.isEqual(",
                "  nesting.outerLeft(selection().end).outerEnd",
                ")"
              ]
            },
            {
              "command": "editor.action.insertSnippet",
              "args": {
                "snippet": "[${0:$TM_SELECTED_TEXT}]"
              }
            }
          ],
          "context": "!selection().isEmpty"
        },
        {
          "command": "nesting.wrapRight",
          "args": {
            "into": [
              "[",
              "]"
            ]
          },
          "context": [
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "selection.followingText().match(",
            "  '^(\\w|[\\(\\{\\[\\<\"\\'`])'",
            ")"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "[$0]"
          },
          "context": [
            "!selection.scope().match('(comment\\.|string)') && ",
            "selection.followingText().match('^(\\W|$)') &&",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*)$)')"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "["
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  {
    "key": "]",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "[${0:$TM_SELECTED_TEXT}]"
          },
          "context": [
            "selection.text().match('^[\\(\\{\\[\\<](.|\n)*[\\)\\}\\]\\>]$') &&",
            "nesting.outerRight(selection().start) &&",
            "selection().start.isEqual(",
            "  nesting.outerRight(selection().start).outerStart",
            ") && ",
            "nesting.outerLeft() &&",
            "selection().end.isEqual(",
            "  nesting.outerLeft(selection().end).outerEnd",
            ")"
          ]
        },
        {
          "command": "cursorRight",
          "context": [
            "selection.precedingText().match('\\[\\w*$') &&",
            "selection.followingText().match('^\\]') &&",
            "!selection.scope().match('(comment\\.|string)')"
          ]
        },
        {
          "command": "nesting.stealRight",
          "args": {
            "from": [
              "[",
              "]"
            ]
          },
          "context": [
            "selection.followingText().match('^[\\w\\.\\-\\/\\?!&\\(\\{\\[\\<\"\\'`]') &&",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "nesting.current().kind == '[]' &&",
            "nesting.current().end.isEqual(nesting.continuationAt(selection().active))"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "]"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // nesting change: <
  {
    "key": "shift+,",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "commands": [
            {
              "command": "nesting.swapSelection",
              "args": {
                "into": [
                  "<",
                  ">"
                ]
              },
              "context": [
                "selection.text().match('^[\\(\\{\\[](.|\n)*[\\)\\}\\]]$') &&",
                "nesting.outerRight(selection().start) &&",
                "selection().start.isEqual(",
                "  nesting.outerRight(selection().start).outerStart",
                ") && ",
                "nesting.outerLeft(selection().end) &&",
                "selection().end.isEqual(",
                "  nesting.outerLeft(selection().end).outerEnd",
                ")"
              ]
            },
            {
              "command": "editor.action.insertSnippet",
              "args": {
                "snippet": "<${0:$TM_SELECTED_TEXT}>"
              }
            }
          ],
          "context": "!selection().isEmpty"
        },
        {
          "command": "nesting.wrapRight",
          "args": {
            "into": [
              "<",
              ">"
            ]
          },
          "context": [
            "!selection.scope().endsWith('punctuation.definition.tag.begin.tsx)') && ",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "selection.followingText().match(",
            "  '^(\\w|[\\(\\{\\[\\<\"\\'`])'",
            ")"
          ]
        },
        // {
        //   "command": "editor.action.insertSnippet",
        //   "args": { "snippet": "<$0>", },
        //   "context": [
        //     "!selection.scope().match('(comment\\.|string)') && ",
        //     "selection.followingText().match('^(\\W|$)') &&",
        //     "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*)$)')",
        //   ],
        // },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "<"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  {
    "key": "shift+.",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "<${0:$TM_SELECTED_TEXT}>"
          },
          "context": [
            "selection.text().match('^[\\(\\{\\[\\<](.|\n)*[\\)\\}\\]\\>]$') &&",
            "nesting.outerRight(selection().start) &&",
            "selection().start.isEqual(",
            "  nesting.outerRight(selection().start).outerStart",
            ") && ",
            "nesting.outerLeft() &&",
            "selection().end.isEqual(",
            "  nesting.outerLeft(selection().end).outerEnd",
            ")"
          ]
        },
        // {
        //   "command": "cursorRight",
        //   "context": [
        //     "selection.precedingText().match('\\<\\w*$') &&",
        //     "selection.followingText().match('^\\>') &&",
        //     "!selection.scope().match('(comment\\.|string)')",
        //   ]
        // },
        {
          "command": "nesting.stealRight",
          "args": {
            "from": [
              "<",
              ">"
            ]
          },
          "context": [
            "selection.followingText().match('^[\\w\\.\\-\\/\\?!&\\(\\{\\[\\<\"\\'`]') &&",
            "!selection.scope().match('(comment\\.|string.*(?<!\\spunctuation\\S*(start|begin)\\S*)$)') && ",
            "nesting.current() &&",
            "nesting.current().kind == '<>' &&",
            "nesting.current().end.isEqual(nesting.continuationAt(selection().active))"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": ">"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // nesting change: "
  {
    "key": "shift+'",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "commands": [
            {
              "command": "nesting.swapSelection",
              "args": {
                "into": [
                  "\"",
                  "\""
                ]
              },
              "context": [
                "selection.text().match('^[\\'`](.|\n)*[\\'`]$') &&",
                "nesting.outerRight(selection().start) &&",
                "selection().start.isEqual(",
                "  nesting.outerRight(selection().start).outerStart",
                ") &&",
                "nesting.outerLeft(selection().end) &&",
                "selection().end.isEqual(",
                "  nesting.outerLeft(selection().end).outerEnd",
                ")"
              ]
            },
            {
              "command": "editor.action.insertSnippet",
              "args": {
                "snippet": "\"${0:$TM_SELECTED_TEXT}\""
              }
            }
          ],
          "context": "!selection().isEmpty"
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "\"$0\""
          },
          "context": [
            "selection.followingText().match('^(\\W|$)')"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "\""
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // nesting change: '
  {
    "key": "'",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "commands": [
            {
              "command": "nesting.swapSelection",
              "args": {
                "into": [
                  "'",
                  "'"
                ]
              },
              "context": [
                "selection.text().match('^[\"`](.|\n)*[\"`]$') &&",
                "nesting.outerRight(selection().start) &&",
                "selection().start.isEqual(",
                "  nesting.outerRight(selection().start).outerStart",
                ") && ",
                "nesting.outerLeft(selection().end) &&",
                "selection().end.isEqual(",
                "  nesting.outerLeft(selection().end).outerEnd",
                ")"
              ]
            },
            {
              "command": "editor.action.insertSnippet",
              "args": {
                "snippet": "'${0:$TM_SELECTED_TEXT}'"
              }
            }
          ],
          "context": "!selection().isEmpty"
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "'$0'"
          },
          "context": [
            "selection.followingText().match('^(\\W|$)')"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "'"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // nesting change: `
  {
    "key": "`",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "commands": [
            {
              "command": "nesting.swapSelection",
              "args": {
                "into": [
                  "`",
                  "`"
                ]
              },
              "context": [
                "selection.text().match('^[\"\\'](.|\n)*[\"\\']$') &&",
                "nesting.outerRight(selection().start) &&",
                "selection().start.isEqual(",
                "  nesting.outerRight(selection().start).outerStart",
                ") && ",
                "nesting.outerLeft(selection().end) &&",
                "selection().end.isEqual(",
                "  nesting.outerLeft(selection().end).outerEnd",
                ")"
              ]
            },
            {
              "command": "editor.action.insertSnippet",
              "args": {
                "snippet": "`${0:$TM_SELECTED_TEXT}`"
              }
            }
          ],
          "context": "!selection().isEmpty"
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "`$0`"
          },
          "context": [
            "selection.followingText().match('^(\\W|$)')"
          ]
        },
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "`"
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // goto into nesting backward
  {
    "key": "ctrl+'",
    "command": "locations.go",
    "args": {
      "direction": "backward",
      "to": {
        "location": {
          "location": "nestingEnd",
          "level": 0,
          "string": false
        }
      }
    },
    "when": "editorTextFocus"
  },
  // goto out nesting backward
  {
    "key": "ctrl+shift+'",
    "command": "locations.go",
    "args": {
      "direction": "backward",
      "to": {
        "location": "nestingStart",
        "level": -1,
        "string": false
      }
    },
    "when": "editorTextFocus"
  },
  // goto over nesting backward
  {
    "key": "ctrl+shift+;",
    "command": "locations.go",
    "args": {
      "direction": "backward",
      "to": {
        "location": "nestingStart",
        "level": 0
      }
    },
    "when": "editorTextFocus"
  },
  // goto into nesting forward
  {
    "key": "alt+enter",
    "command": "locations.go",
    "args": {
      "direction": "forward",
      "to": {
        "location": "nesting",
        "kind": "start",
        "levels": [
          1
        ],
        "after": true,
        "ignore": [
          "strings",
          "outer-nesting"
        ]
      }
    },
    "when": "editorTextFocus"
  },
  // goto over or out nesting forward
  {
    "key": "alt+shift+enter",
    "command": "locations.go",
    "args": {
      "direction": "forward",
      "to": {
        "location": "nesting",
        "kind": "end",
        "levels": [
          0
        ],
        "after": true,
        "ignore": [
          "strings"
        ]
      }
    },
    "when": "editorTextFocus"
  },
  // goto over nesting forward
  {
    "key": "ctrl+shift+enter",
    "command": "locations.go",
    "args": {
      "direction": "forward",
      "to": {
        "location": "nesting",
        "kind": "end",
        "levels": [
          1
        ],
        "after": true,
        "ignore": [
          "strings",
          "outer-nesting"
        ]
      }
    },
    "when": "editorTextFocus"
  },
  // nesting selection
  {
    "key": "ctrl+alt+shift+enter",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "locations.expand",
          "args": {
            "backward": {
              "location": "nesting",
              "kind": "start",
              "levels": [
                -2
              ],
              "after": true
            },
            "forward": {
              "location": "nesting",
              "kind": "end",
              "levels": [
                -2
              ],
              "after": false
            }
          },
          "context": [
            "selection().start.isEqual(nesting.current().start) &&",
            "selection().end.isEqual(nesting.current().end)"
          ]
        },
        {
          "command": "locations.expand",
          "args": {
            "backward": {
              "location": "nesting",
              "kind": "start",
              "levels": [
                0
              ],
              "after": true
            },
            "forward": {
              "location": "nesting",
              "kind": "end",
              "levels": [
                0
              ],
              "after": false
            }
          }
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // word navigation
  {
    "key": "ctrl+alt+j",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "locations.go",
          "args": {
            "direction": "backward",
            "to": {
              "location": "nesting",
              "kind": "start",
              "levels": [
                1
              ]
            }
          },
          "context": [
            "selection.precedingText().match('[\\)\\}\\]\\>\"\\'`]$') &&",
            "nesting.outerLeft(selection().active) &&",
            "selection().active.isEqual(",
            "  nesting.outerLeft(selection().active).outerEnd",
            ")"
          ]
        },
        {
          "command": "locations.go",
          "args": {
            "direction": "backward",
            "to": {
              "location": "regexp",
              "range": 64,
              "regexp": [
                "(\\w+)[^\\w\\s\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]*\\s*|",
                "(?<=[\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`])|",
                "[^\\w\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]+"
              ]
            }
          }
        }
      ]
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+j",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "locations.select",
          "args": {
            "direction": "backward",
            "expand": {
              "location": "nesting",
              "kind": "start",
              "levels": [
                1
              ]
            }
          },
          "context": [
            "selection.precedingText().match('[\\)\\}\\]\\>\"\\'`]$') &&",
            "nesting.outerLeft(selection().active) &&",
            "selection().active.isEqual(",
            "  nesting.outerLeft(selection().active).outerEnd",
            ")"
          ]
        },
        {
          "command": "locations.select",
          "args": {
            "direction": "backward",
            "expand": {
              "location": "regexp",
              "range": 64,
              "regexp": [
                "(\\w+)[^\\w\\s\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]*\\s*|",
                "(?<=[\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`])|",
                "[^\\w\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]+"
              ]
            }
          }
        }
      ]
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+l",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "locations.go",
          "args": {
            "direction": "forward",
            "to": {
              "location": "nesting",
              "kind": "end",
              "after": true,
              "levels": [
                1
              ]
            }
          },
          "context": [
            "selection.followingText().match('^[\\(\\{\\[\\<\"\\'`]') &&",
            "nesting.outerRight(selection().active) &&",
            "selection().active.isEqual(",
            "  nesting.outerRight(selection().active).outerStart",
            ")"
          ]
        },
        {
          "command": "locations.go",
          "args": {
            "direction": "forward",
            "to": {
              "location": "regexp",
              "range": 64,
              "regexp": [
                "\\s*[^\\w\\s\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]*(\\w+)|",
                "(?=[\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`])|",
                "[^\\w\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]+(?<!\\s)"
              ]
            }
          }
        }
      ]
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+l",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "locations.select",
          "args": {
            "direction": "forward",
            "expand": {
              "location": "nesting",
              "kind": "end",
              "after": true,
              "levels": [
                1
              ]
            }
          },
          "context": [
            "selection.followingText().match('^[\\(\\{\\[\\<\"\\'`]') &&",
            "nesting.outerRight(selection().active) &&",
            "selection().active.isEqual(",
            "  nesting.outerRight(selection().active).outerStart",
            ")"
          ]
        },
        {
          "command": "locations.select",
          "args": {
            "direction": "forward",
            "expand": {
              "location": "regexp",
              "range": 64,
              "regexp": [
                "\\s*[^\\w\\s\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]*(\\w+)|",
                "(?=[\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`])|",
                "[^\\w\\(\\)\\{\\}\\[\\]\\<\\>\"\\'`]+(?<!\\s)"
              ]
            }
          }
        }
      ]
    },
    "when": "textInputFocus"
  },
  // {
  //   "key": "ctrl+alt+j",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       { "command": "cursorWordStartLeft" },
  //     ],
  //   },
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+alt+shift+j",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       { "command": "cursorWordStartLeftSelect" },
  //     ],
  //   },
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+alt+l",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       { "command": "cursorWordEndRight" },
  //     ],
  //   },
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+alt+shift+l",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       { "command": "cursorWordEndRightSelect" },
  //     ],
  //   },
  //   "when": "textInputFocus"
  // },
  // line navigation
  {
    "key": "alt+;",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "cursorHome",
          "context": [
            "selection.precedingText().match('^[\\(\\{\\[\\<\"\\'`\\s]+(?<=\\S.*)$')"
          ]
        },
        {
          "command": "locations.go",
          "args": {
            "direction": "backward",
            "to": {
              "location": "nesting",
              "kind": "start",
              "after": true,
              "levels": [
                -2
              ]
            }
          },
          "context": [
            "selection.precedingText().match('[\\(\\{\\[\\<\"\\'`].*[\\(\\{\\[\\<\"\\'`]$') &&",
            "nesting.current() &&",
            "nesting.current().start.isEqual(selection().active) &&",
            "nesting.at(nesting.current().outerStart) &&",
            "range(selection.bol(), nesting.current().outerStart).contains(",
            "  nesting.at(nesting.current().outerStart).start",
            ")"
          ]
        },
        {
          "command": "locations.go",
          "args": {
            "direction": "backward",
            "to": {
              "location": "nesting",
              "kind": "start",
              "after": true,
              "levels": [
                0
              ]
            }
          },
          "context": [
            "selection().active.isEqual(selection.bolNonEmpty()) || (",
            "  selection.precedingText().match('[\\(\\{\\[\\<\"\\'`]') &&",
            "  nesting.current() &&",
            "  !selection().active.isEqual(nesting.current().start) &&",
            "  range(selection.bol(), selection().active).contains(",
            "    nesting.current().outerStart",
            "  )",
            ")"
          ]
        },
        {
          "command": "cursorHome"
        }
      ]
    },
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+;",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "cursorHomeSelect",
          "context": [
            "selection.precedingText().match('^[\\(\\{\\[\\<\"\\'`\\s]+(?<=\\S.*)$')"
          ]
        },
        {
          "command": "locations.select",
          "args": {
            "direction": "backward",
            "expand": {
              "location": "nesting",
              "kind": "start",
              "after": true,
              "levels": [
                -2
              ]
            }
          },
          "context": [
            "selection.precedingText().match('[\\(\\{\\[\\<\"\\'`].*[\\(\\{\\[\\<\"\\'`]$') &&",
            "nesting.current() &&",
            "nesting.current().start.isEqual(selection().active) &&",
            "nesting.at(nesting.current().outerStart) &&",
            "range(selection.bol(), nesting.current().outerStart).contains(",
            "  nesting.at(nesting.current().outerStart).start",
            ")"
          ]
        },
        {
          "command": "locations.select",
          "args": {
            "direction": "backward",
            "expand": {
              "location": "nesting",
              "kind": "start",
              "after": true,
              "levels": [
                0
              ]
            }
          },
          "context": [
            "selection().active.isEqual(selection.bolNonEmpty()) || (",
            "  selection.precedingText().match('[\\(\\{\\[\\<\"\\'`]') &&",
            "  nesting.current() &&",
            "  !selection().active.isEqual(nesting.current().start) &&",
            "  range(selection.bol(), selection().active).contains(",
            "    nesting.current().outerStart",
            "  )",
            ")"
          ]
        },
        {
          "command": "cursorHomeSelect"
        }
      ]
    },
    "when": "textInputFocus"
  },
  {
    "key": "alt+'",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "cursorEnd",
          "context": [
            "selection.followingText().match('^[\\)\\}\\]\\>\"\\'`,;\\s]+(?<=\\S.*)$')"
          ]
        },
        {
          "command": "locations.go",
          "args": {
            "direction": "forward",
            "to": {
              "location": "nesting",
              "kind": "end",
              "after": false,
              "levels": [
                -2
              ]
            }
          },
          "context": [
            "selection.followingText().match('^[\\)\\}\\]\\>\"\\'`].*[\\)\\}\\]\\>\"\\'`]') &&",
            "nesting.current() &&",
            "nesting.current().end.isEqual(selection().active) &&",
            "nesting.at(nesting.current().outerEnd) && ",
            "range(nesting.current().outerEnd, selection.eol()).contains(",
            "  nesting.at(nesting.current().outerEnd).end",
            ")"
          ]
        },
        {
          "command": "locations.go",
          "args": {
            "direction": "forward",
            "to": {
              "location": "nesting",
              "kind": "end",
              "after": false,
              "levels": [
                0
              ]
            }
          },
          "context": [
            "selection().active.isEqual(selection.eol()) || (",
            "  selection.followingText().match('[\\)\\}\\]\\>\"\\'`]') &&",
            "  nesting.current() &&",
            "  !selection().active.isEqual(nesting.current().end) &&",
            "  range(selection().active, selection.eol()).contains(",
            "    nesting.current().outerEnd",
            "  )",
            ")"
          ]
        },
        {
          "command": "cursorEnd"
        }
      ]
    },
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+'",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        {
          "command": "cursorEndSelect",
          "context": [
            "selection.followingText().match('^[\\)\\}\\]\\>\"\\'`,;\\s]+(?<=\\S.*)$')"
          ]
        },
        {
          "command": "locations.select",
          "args": {
            "direction": "forward",
            "expand": {
              "location": "nesting",
              "kind": "end",
              "after": false,
              "levels": [
                -2
              ]
            }
          },
          "context": [
            "selection.followingText().match('^[\\)\\}\\]\\>\"\\'`].*[\\)\\}\\]\\>\"\\'`]') &&",
            "nesting.current() &&",
            "nesting.current().end.isEqual(selection().active) &&",
            "nesting.at(nesting.current().outerEnd) && ",
            "range(nesting.current().outerEnd, selection.eol()).contains(",
            "  nesting.at(nesting.current().outerEnd).end",
            ")"
          ]
        },
        {
          "command": "locations.select",
          "args": {
            "direction": "forward",
            "expand": {
              "location": "nesting",
              "kind": "end",
              "after": false,
              "levels": [
                0
              ]
            }
          },
          "context": [
            "selection().active.isEqual(selection.eol()) || (",
            "  selection.followingText().match('[\\)\\}\\]\\>\"\\'`]') &&",
            "  nesting.current() &&",
            "  !selection().active.isEqual(nesting.current().end) &&",
            "  range(selection().active, selection.eol()).contains(",
            "    nesting.current().outerEnd",
            "  )",
            ")"
          ]
        },
        {
          "command": "cursorEndSelect"
        }
      ]
    },
    "when": "textInputFocus"
  },
  // {
  //   "key": "alt+'",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       {
  //         "commands": [
  //           {
  //             "command": "locations.go",
  //             "args": {
  //               "direction": "forward",
  //               "to": {
  //                 "location": "nesting",
  //                 "kind": "end",
  //                 "levels": [-2],
  //               },
  //             },
  //             "context": [
  //               "nesting.outerRight(selection().active) != null &&",
  //               "range(position.shift(selection().active, 1), selection.eol()).contains(",
  //               "  nesting.outerRight(selection().active).outerEnd",
  //               ")",
  //             ]
  //           },
  //           { "command": "cursorEnd" },
  //         ],
  //         "context": [
  //           "nesting.current() &&",
  //           "selection().active.isEqual(nesting.current().end)"
  //         ]
  //       },
  //       {
  //         "command": "locations.go",
  //         "args": {
  //           "direction": "forward",
  //           "to": {
  //             "location": "nesting",
  //             "kind": "end",
  //             "levels": [0],
  //           },
  //         },
  //         "context": [
  //           "selection().active.isEqual(selection.eol()) || (",
  //           "  nesting.current() &&",
  //           "  range(selection().active, selection.eol()).contains(",
  //           "    nesting.current().outerEnd",
  //           "  )",
  //           ")",
  //         ]
  //       },
  //       { "command": "cursorEnd" },
  //     ],
  //   },
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "alt+shift+'",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       {
  //         "commands": [
  //           {
  //             "command": "locations.select",
  //             "args": {
  //               "direction": "forward",
  //               "expand": {
  //                 "location": "nesting",
  //                 "kind": "end",
  //                 "levels": [-2],
  //               },
  //             },
  //             "context": [
  //               "nesting.outerRight(selection().active) != null &&",
  //               "range(position.shift(selection().active, 1), selection.eol()).contains(",
  //               "  nesting.outerRight(selection().active).outerEnd",
  //               ")",
  //             ]
  //           },
  //           { "command": "cursorEndSelect" },
  //         ],
  //         "context": [
  //           "nesting.current() &&",
  //           "selection().active.isEqual(nesting.current().end)"
  //         ]
  //       },
  //       {
  //         "command": "locations.select",
  //         "args": {
  //           "direction": "forward",
  //           "expand": {
  //             "location": "nesting",
  //             "kind": "end",
  //             "levels": [0],
  //           },
  //         },
  //         "context": [
  //           "selection().active.isEqual(selection.eol()) || (",
  //           "  nesting.current() &&",
  //           "  range(selection().active, selection.eol()).contains(",
  //           "    nesting.current().outerEnd",
  //           "  )",
  //           ")",
  //         ]
  //       },
  //       { "command": "cursorEndSelect" },
  //     ],
  //   },
  //   "when": "textInputFocus"
  // },
  // tmp
  // {
  //   "key": "alt+;",
  //   "command": "cursorHome",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "alt+shift+;",
  //   "command": "cursorHomeSelect",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "alt+'",
  //   "command": "cursorEnd",
  //   "when": "editorTextFocus"
  // },
  // {
  //   "key": "alt+shift+'",
  //   "command": "cursorEndSelect",
  //   "when": "textInputFocus"
  // },
  {
    "key": "space",
    "command": "commands.execute",
    "args": {
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": " "
          }
        },
        {
          "command": "hideSuggestWidget"
        }
      ]
    },
    "when": "editorTextFocus"
  },
  {
    "key": ".",
    "command": "commands.execute",
    "args": {
      "commands": [
        {
          "command": "editor.action.insertSnippet",
          "args": {
            "snippet": "."
          }
        },
        {
          "command": "hideSuggestWidget"
        }
      ]
    },
    "when": "editorTextFocus"
  },
  // imports
  {
    "key": "ctrl+u ctrl+i",
    "command": "imports.import"
  },
  // completions
  {
    "key": "ctrl+o",
    "command": "completions.next",
    "args": {
      "delimiter": "\\w"
    }
  },
  {
    "key": "ctrl+shift+o",
    "command": "completions.prev",
    "args": {
      "delimiter": "\\w"
    }
  },
  {
    "key": "alt+o",
    "command": "completions.next",
    "args": {
      "delimiter": "[\\w\\.\\-\\/:]",
      "prefix": "\\W(?=[\\w\\.\\-\\/:]+[\\.\\-\\/:][\\w]+)"
    }
  },
  {
    "key": "alt+shift+o",
    "command": "completions.prev",
    "args": {
      "delimiter": "[\\w\\.\\-\\/:]",
      "prefix": "\\W(?=[\\w\\.\\-\\/:]+[\\.\\-\\/:][\\w]+)"
    }
  },
  {
    "key": "ctrl+alt+o",
    "command": "completions.next",
    "args": {
      "prefix": "",
      "delimiter": ".",
      "head": "\\w+"
    }
  },
  {
    "key": "ctrl+alt+shift+o",
    "command": "completions.prev",
    "args": {
      "prefix": "",
      "delimiter": ".",
      "head": "\\w+"
    }
  },
  // refactoring
  {
    "key": "ctrl+m ctrl+a",
    "command": "cmstead.jsRefactor.markAsAsync",
    "when": "editorLangId == javascript || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == typescriptreact"
  },
  {
    "key": "ctrl+m ctrl+m",
    "command": "cmstead.jsRefactor.extractMethod",
    "when": "editorLangId == javascript || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == typescriptreact"
  },
  {
    "key": "ctrl+m ctrl+v",
    "command": "cmstead.jsRefactor.extractVariable",
    "when": "editorLangId == javascript || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == typescriptreact"
  },
  {
    "key": "ctrl+m ctrl+r",
    "command": "cmstead.jsRefactor.inlineVariable",
    "when": "editorLangId == javascript || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == typescriptreact"
  },
  // merging changes
  {
    "key": "ctrl+m ctrl+,",
    "command": "merge-conflict.accept.current"
  },
  {
    "key": "ctrl+m ,",
    "command": "merge-conflict.previous"
  },
  {
    "key": "ctrl+m ctrl+.",
    "command": "merge-conflict.accept.incoming"
  },
  {
    "key": "ctrl+m .",
    "command": "merge-conflict.next"
  },
  {
    "key": "ctrl+m ctrl+/",
    "command": "merge-conflict.accept.both"
  },
  // git navigation
  {
    "key": "ctrl+m ctrl+j",
    "command": "git.openChange"
  },
  {
    "key": "ctrl+m j",
    "command": "workbench.view.scm"
  },
  {
    "key": "ctrl+m ctrl+k",
    "command": "git.stage"
  },
  {
    "key": "ctrl+m k",
    "command": "git.stageSelectedRanges"
  },
  {
    "key": "ctrl+m ctrl+l",
    "command": "git.unstage"
  },
  {
    "key": "ctrl+m l",
    "command": "git.unstageSelectedRanges"
  },
  // problems
  {
    "key": "alt+q",
    "command": "editor.action.marker.next",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+q",
    "command": "editor.action.marker.prev",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+q",
    "command": "editor.action.quickFix",
    "when": "editorTextFocus && !editorReadonly"
  },
  // {
  //   "key": "ctrl+alt+shift+q",
  //   "command": "editor.action.marker.prevInFiles",
  //   "when": "editorTextFocus && !editorReadonly"
  // },
  {
    "key": "ctrl+u ctrl+q",
    "command": "workbench.actions.view.problems"
  },
  {
    "key": "ctrl+u ctrl+a",
    "command": "workbench.debug.action.focusRepl"
  },
  {
    "key": "ctrl+u a",
    "command": "workbench.debug.panel.action.clearReplAction"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.panel.output.focus",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.closePanel",
    "when": "!editorTextFocus || editorReadonly"
  },
  // bookmarks
  {
    "key": "ctrl+w",
    "command": "bookmarks.toggle",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+w",
    "command": "bookmarks.selectLines",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+shift+w",
    "command": "bookmarks.clear",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+w",
    "command": "bookmarks.jumpToNext",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+shift+w",
    "command": "bookmarks.jumpToPrevious",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+u ctrl+w",
    "command": "bookmarks.expandSelectionToNext",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+u w",
    "command": "bookmarks.expandSelectionToPrevious",
    "when": "editorTextFocus"
  },
  // snippets
  {
    "key": "tab",
    "command": "commands.run",
    "args": {
      "commands": [
        {
          "command": "snippets.expand",
          "context": "cursor.startPrecedingText().match('(\n|^).*\\S.*$')"
        },
        {
          "command": "editor.action.indentLines",
        }
      ]
    },
    "when": "editorTextFocus"
  },
  {
    "key": "f14",
    "command": "snippets.nextTab",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+d",
    "command": "snippets.nextTab",
    "when": "editorTextFocus"
  },
  {
    "key": "f4",
    "command": "snippets.nextTab",
    "when": "editorTextFocus"
  },
  // {
  //   "key": "f7",
  //   "command": "snippets.nextTab",
  //   "when": "editorTextFocus"
  // },
  // {
  //   "key": "f4",
  //   "command": "snippets.nextTab",
  //   "when": "editorTextFocus"
  // },
  // {
  //   "key": "f14",
  //   "command": "jumpToNextSnippetPlaceholder",
  //   "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
  // },
  // window
  {
    "key": "alt+\\",
    "command": "workbench.action.showCommands"
  },
  // configuration
  {
    "key": "ctrl+u ctrl+u",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  {
    "key": "ctrl+u u",
    "command": "workbench.action.openSettingsJson"
  },
  {
    "key": "ctrl+u p",
    "command": "workbench.action.openWorkspaceConfigFile"
  },
  {
    "key": "ctrl+u ctrl+p",
    "command": "vscodeWorkspaceSwitcher.openWorkspace"
  },
  {
    "key": "alt+shift+u",
    "command": "editor.action.toggleWordWrap"
  },
  // appearance
  {
    "key": "ctrl+u ctrl+t",
    "command": "workbench.action.selectTheme"
  },
  {
    "key": "ctrl+alt+shift+q",
    "command": "workbench.action.toggleMenuBar"
  },
  {
    "key": "alt+e",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  // files navigation
  {
    "key": "alt+n",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+u ctrl+f",
    "command": "workbench.action.findInFiles"
  },
  {
    "key": "ctrl+u ctrl+o",
    "command": "workbench.files.action.showActiveFileInExplorer"
  },
  // files interaction
  {
    "key": "ctrl+u ctrl+c",
    "command": "copyRelativePath"
  },
  // files management
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+u ctrl+n",
    "command": "workbench.action.newWindow"
  },
  // git
  {
    "key": "ctrl+u ctrl+e",
    "command": "git.checkout"
  },
  // snippets
  {
    "key": "\\",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "alt+s",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetVisible"
  },
  // editor
  {
    "key": "ctrl+alt+r",
    "command": "editor.action.refactor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+e",
    "command": "editor.action.showHover",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  {
    "key": "alt+shift+e",
    "command": "editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  // {
  //   "key": "ctrl+n ctrl+i",
  //   "command": "changeEditorIndentation",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+v",
  //   "command": "pasteAndIndent.action",
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // symbol navigation
  {
    "key": "alt+shift+n",
    "command": "workbench.action.gotoSymbol",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+n",
    "command": "workbench.action.showAllSymbols"
  },
  {
    "key": "ctrl+e",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+shift+e",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+alt+shift+e",
    "command": "editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+r",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  // tabs groups
  {
    "key": "ctrl+n ctrl+j",
    "command": "workbench.action.focusLeftGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n ctrl+l",
    "command": "workbench.action.focusRightGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n j",
    "command": "workbench.action.moveEditorToLeftGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n l",
    "command": "workbench.action.moveEditorToRightGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n ctrl+i",
    "command": "workbench.action.focusAboveGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n ctrl+k",
    "command": "workbench.action.focusBelowGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n i",
    "command": "workbench.action.moveEditorToAboveGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n k",
    "command": "workbench.action.moveEditorToBelowGroup",
    // "when": "textInputFocus"
  },
  {
    "key": "ctrl+n ctrl+o",
    "command": "workbench.action.splitEditor",
    // "when": "textInputFocus"
  },
  // tabs navigation
  {
    "key": "ctrl+alt+tab",
    "command": "commands.execute",
    "args": {
      "commands": [
        {
          "command": "workbench.action.focusFirstEditorGroup"
        },
        {
          "command": "workbench.action.focusActiveEditorGroup"
        },
      ]
    }
  },
  {
    "key": "ctrl+,",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "key": "ctrl+.",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "key": "ctrl+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "ctrl+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  // tabs control
  {
    "key": "ctrl+shift+,",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "ctrl+shift+.",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "ctrl+alt+,",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+alt+.",
    "command": "workbench.action.closeEditorsToTheRight"
  },
  {
    "key": "ctrl+alt+shift+,",
    "command": "workbench.action.closeOtherEditors"
  },
  {
    "key": "ctrl+alt+shift+.",
    "command": "workbench.action.closeAllEditors"
  },
  {
    "key": "ctrl+alt+s",
    "command": "workbench.action.files.saveAll"
  },
  // character navigation
  {
    "key": "alt+i",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+k",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "alt+j",
    "command": "cursorLeft",
    "when": "textInputFocus"
  },
  {
    "key": "alt+l",
    "command": "cursorRight",
    "when": "textInputFocus"
  },
  // character selection
  {
    "key": "alt+shift+i",
    "command": "cursorUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+k",
    "command": "cursorDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+j",
    "command": "cursorLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+shift+l",
    "command": "cursorRightSelect",
    "when": "textInputFocus"
  },
  // word part navigation
  {
    "key": "ctrl+j",
    "command": "cursorWordPartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "cursorWordPartRight",
    "when": "textInputFocus"
  },
  // word part selection
  {
    "key": "ctrl+shift+j",
    "command": "cursorWordPartLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  // line deletion
  {
    "key": "ctrl+shift+backspace",
    "command": "deleteAllLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+/",
    "command": "deleteAllRight",
    "when": "textInputFocus && !editorReadonly"
  },
  // blocklet navigation & selection
  {
    "key": "ctrl+i",
    "command": "locations.go",
    "args": {
      "to": [
        "spacing-before",
        "bof"
      ],
      "direction": "backward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "locations.go",
    "args": {
      "to": [
        "spacing-after",
        "eof"
      ],
      "direction": "forward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+i",
    "command": "locations.select",
    "args": {
      "expand": [
        "spacing-bob",
        "bof"
      ],
      "shrink": [
        "spacing-eob",
        "bof"
      ],
      "direction": "backward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+k",
    "command": "locations.select",
    "args": {
      "expand": [
        "spacing-eob",
        "eof"
      ],
      "shrink": [
        "spacing-bob",
        "eof"
      ],
      "direction": "forward"
    },
    "when": "textInputFocus"
  },
  // block navigation backward
  {
    "key": "ctrl+y",
    "command": "locations.go",
    "args": {
      "to": [
        "hill-eob-before"
      ],
      "direction": "backward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "alt+y",
    "command": "locations.go",
    "args": {
      "to": [
        "plato-before"
      ],
      "direction": "backward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+y",
    "command": "locations.go",
    "args": {
      "to": [
        "hill-bob"
      ],
      "direction": "backward"
    },
    "when": "textInputFocus"
  },
  // block navigation forward
  {
    "key": "ctrl+h",
    "command": "locations.go",
    "args": {
      "to": [
        "hill-bob-after"
      ],
      "direction": "forward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "alt+h",
    "command": "locations.go",
    "args": {
      "to": [
        "plato-after"
      ],
      "direction": "forward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+h",
    "command": "locations.go",
    "args": {
      "to": [
        "hill-eob"
      ],
      "direction": "forward"
    },
    "when": "textInputFocus"
  },
  // block selection backward
  {
    "key": "alt+shift+y",
    "command": "locations.select",
    "args": {
      "expand": [
        "plato-bob"
      ],
      "direction": "backward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+y",
    "command": "locations.select",
    "args": {
      "expand": [
        "hill-bob"
      ],
      "shrink": [
        "hill-eob"
      ],
      "direction": "backward"
    },
    "when": "textInputFocus"
  },
  // block selection forward
  {
    "key": "alt+shift+h",
    "command": "locations.select",
    "args": {
      "expand": [
        "plato-eob"
      ],
      "direction": "forward"
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+h",
    "command": "locations.select",
    "args": {
      "expand": [
        "hill-eob"
      ],
      "shrink": [
        "hill-bob"
      ],
      "direction": "forward"
    },
    "when": "textInputFocus"
  },
  // block movement backward
  // {
  //   "key": "ctrl+alt+y",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "to": [
  //             "spacing-eob",
  //             "plato-bob",
  //             "hill-eob-bol",
  //             "bof"
  //           ],
  //           "direction": "backward"
  //         },
  //         "context": "!selection().isEmpty"
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "hill-bob"
  //             ],
  //             "end": [
  //               "hill-eob"
  //             ]
  //           },
  //           "to": [
  //             "spacing-eob",
  //             "plato-bob",
  //             "hill-eob-bol",
  //             "bof"
  //           ],
  //           "direction": "backward"
  //         },
  //         "context": [
  //           "locations.checkLine(selection().anchor.line, 'hill-bob') ||",
  //           "locations.checkLine(selection().anchor.line, 'hill-eob')"
  //         ]
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "bol"
  //             ],
  //             "end": [
  //               "eol"
  //             ]
  //           },
  //           "to": [
  //             "spacing-eob",
  //             "plato-bob",
  //             "hill-eob-bol",
  //             "bof"
  //           ],
  //           "direction": "backward"
  //         }
  //       }
  //     ]
  //   },
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // {
  //   "key": "ctrl+alt+shift+n",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "to": [
  //             "hill-bob"
  //           ],
  //           "direction": "backward"
  //         },
  //         "context": "!selection().isEmpty"
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "hill-bob"
  //             ],
  //             "end": [
  //               "hill-eob"
  //             ]
  //           },
  //           "to": [
  //             "hill-bob"
  //           ],
  //           "direction": "backward"
  //         },
  //         "context": [
  //           "locations.checkLine(selection().anchor.line, 'hill-bob') ||",
  //           "locations.checkLine(selection().anchor.line, 'hill-eob')"
  //         ]
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "bol"
  //             ],
  //             "end": [
  //               "eol"
  //             ]
  //           },
  //           "to": [
  //             "hill-bob"
  //           ],
  //           "direction": "backward"
  //         }
  //       }
  //     ]
  //   },
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // block movement forward
  // {
  //   "key": "ctrl+alt+h",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "to": [
  //             "spacing-eob",
  //             "plato-eob",
  //             "hill-bob-after",
  //             "eof"
  //           ],
  //           "direction": "forward"
  //         },
  //         "context": "!selection().isEmpty"
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "hill-bob"
  //             ],
  //             "end": [
  //               "hill-eob"
  //             ]
  //           },
  //           "to": [
  //             "spacing-eob",
  //             "plato-eob",
  //             "hill-bob-after",
  //             "eof"
  //           ],
  //           "direction": "forward"
  //         },
  //         "context": [
  //           "locations.checkLine(selection().anchor.line, 'hill-bob') ||",
  //           "locations.checkLine(selection().anchor.line, 'hill-eob')"
  //         ]
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "bol"
  //             ],
  //             "end": [
  //               "eol"
  //             ]
  //           },
  //           "to": [
  //             "spacing-eob",
  //             "plato-eob",
  //             "hill-bob-after",
  //             "eof"
  //           ],
  //           "direction": "forward"
  //         }
  //       }
  //     ]
  //   },
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // {
  //   "key": "ctrl+alt+n",
  //   "command": "commands.run",
  //   "args": {
  //     "forEachSelection": true,
  //     "commands": [
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "to": [
  //             "hill-eob"
  //           ],
  //           "direction": "forward"
  //         },
  //         "context": "!selection().isEmpty"
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "hill-bob"
  //             ],
  //             "end": [
  //               "hill-eob"
  //             ]
  //           },
  //           "to": [
  //             "hill-eob"
  //           ],
  //           "direction": "forward"
  //         },
  //         "context": [
  //           "locations.checkLine(selection().anchor.line, 'hill-bob') ||",
  //           "locations.checkLine(selection().anchor.line, 'hill-eob')"
  //         ]
  //       },
  //       {
  //         "command": "locations.move",
  //         "args": {
  //           "subject": {
  //             "start": [
  //               "bol"
  //             ],
  //             "end": [
  //               "eol"
  //             ]
  //           },
  //           "to": [
  //             "hill-eob"
  //           ],
  //           "direction": "forward"
  //         }
  //       }
  //     ]
  //   },
  //   "when": "textInputFocus && !editorReadonly"
  // },
  // block expansion
  {
    "key": "ctrl+alt+shift+u",
    "command": "commands.run",
    "args": {
      "forEachSelection": true,
      "commands": [
        // select plato before if plato is seleted
        {
          "command": "locations.expand",
          "args": {
            "backward": [
              "plato-before"
            ],
            "forward": [
              "plato-after-eol"
            ]
          },
          "context": [
            "(locations.checkLine(selection().anchor.line, 'plato-bob') &&",
            "locations.checkLine(selection().active.line, 'plato-eob'))"
          ]
        },
        // select hill if selection is empty and location is hill start or end
        {
          "command": "locations.expand",
          "args": {
            "backward": [
              "hill-bob"
            ],
            "forward": [
              "hill-eob"
            ]
          },
          "context": [
            "selection().isEmpty &&",
            "(locations.checkLine(selection().anchor.line, 'hill-bob') || ",
            "locations.checkLine(selection().active.line, 'hill-eob'))"
          ]
        },
        // select plane if spacing bob or eob selected
        {
          "command": "locations.expand",
          "args": {
            "backward": [
              "plato-bob"
            ],
            "forward": [
              "plato-eob"
            ]
          },
          "context": [
            "(locations.checkLine(selection().anchor.line, 'spacing-bob') || ",
            "locations.checkLine(selection().active.line, 'spacing-eob')) &&",
            "(locations.checkLine(selection().anchor.line, 'spacing-bob', 'plato-eob') || ",
            "locations.checkLine(selection().active.line, 'spacing-eob', 'plato-eob'))"
          ]
        },
        // expand to spacing or plato
        {
          "command": "locations.expand",
          "args": {
            "backward": [
              "spacing-bob",
              "plato-bob"
            ],
            "forward": [
              "spacing-eob",
              "plato-eob"
            ]
          }
        }
      ]
    }
  },
  // file navigation
  {
    "key": "ctrl+alt+;",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+'",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  // file selection
  {
    "key": "ctrl+alt+shift+;",
    "command": "cursorTopSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+'",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  // smart selection
  // {
  //   "key": "ctrl+alt+shift+enter",
  //   "command": "editor.action.smartSelect.expand",
  //   "when": "editorTextFocus"
  // },
  // scroll
  {
    "key": "ctrl+alt+i",
    "command": "editorScroll",
    "args": {
      "to": "up",
      "by": "line",
      "revealCursor": false,
      "value": 16
    },
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "editorScroll",
    "args": {
      "to": "down",
      "by": "line",
      "revealCursor": false,
      "value": 16
    },
    "when": "textInputFocus"
  },
  // line editing
  {
    "key": "ctrl+d",
    "command": "editor.action.copyLinesDownAction",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+shift+i",
    "command": "editor.action.moveLinesUpAction",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+shift+k",
    "command": "editor.action.moveLinesDownAction",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+t",
    "command": "editor.action.joinLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+/",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  // edit history
  {
    "key": "ctrl+shift+z",
    "command": "redo",
    "when": "textInputFocus && !editorReadonly"
  },
  // {
  //   "command": "editsHistory.moveCursorToNextEditInSameFile",
  //   "key": "alt+z",
  //   "when": "editorTextFocus"
  // },
  // {
  //   "command": "editsHistory.moveCursorToPreviousEditInSameFile",
  //   "key": "alt+shift+z",
  //   "when": "editorTextFocus"
  // },
  // editing
  {
    "key": "shift+enter",
    "command": "editor.action.insertLineBefore",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+q",
    "command": "editor.action.commentLine",
    // "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+q",
    "command": "editor.action.blockComment",
    "when": "textInputFocus && !editorReadonly"
  },
  // cursors
  {
    "key": "alt+u",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "alt+c",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "alt+shift+c",
    "command": "editor.action.addSelectionToPreviousFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+u",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  // search
  {
    "key": "ctrl+alt+f",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+shift+f",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+f",
    "command": "editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "alt+shift+f",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  // list navigation
  {
    "key": "alt+k",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  // {
  //   "key": "alt+;",
  //   "command": "list.focusFirst",
  //   "when": "listFocus && !inputFocus"
  // },
  // {
  //   "key": "alt+'",
  //   "command": "list.focusLast",
  //   "when": "listFocus && !inputFocus"
  // },
  {
    "key": "alt+i",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "list.scrollDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+alt+i",
    "command": "list.scrollUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+j",
    "command": "list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "alt+l",
    "command": "list.expand",
    "when": "listFocus && !inputFocus"
  },
  // suggestions
  {
    "key": "alt+i",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "alt+k",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // quick open
  {
    "key": "alt+i",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  // undo
  {
    "key": "ctrl+z",
    "command": "commands.execute",
    "args": {
      "commands": [
        {
          "command": "snippets.preventNextAutoExpansion"
        },
        {
          "command": "undo"
        },
      ]
    }
  },
  {
    "key": "ctrl+alt+\\",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+u ctrl+s",
    "command": "workbench.action.files.saveWithoutFormatting",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+meta+enter",
    "command": "notebook.cell.executeCellAndBelow"
  },
  {
    "key": "ctrl+r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "f2",
    "command": "-renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "alt+f",
    "command": "search.action.focusSearchList",
    "when": "searchViewletFocus"
  },
  {
    "key": "ctrl+u ctrl+r",
    "command": "workbench.action.replaceInFiles"
  },
  {
    "key": "ctrl+shift+h",
    "command": "-workbench.action.replaceInFiles"
  },
  {
    "key": "ctrl+u ctrl+t",
    "command": "typescript.restartTsServer"
  },
  {
    "key": "ctrl+alt+[",
    "command": "scrollLeft"
  },
  {
    "key": "ctrl+alt+]",
    "command": "scrollRight"
  },
  // {
  //   "key": "f3",
  //   "command": "jupyter.runcurrentcell",
  //   // "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !jupyter.webExtension && !notebookEditorFocused"
  // },
  // {
  //   "key": "f4",
  //   "command": "jupyter.runcell"
  // }
]