<snippets>

	<snippet>
		<content><![CDATA[
null
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>n</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "([\\w=,(:]|=\\{)\\s*n$"},
			]
		]]></context>
		<order>2</order>
		<description>lang: null</description>
	</snippet>

	<snippet>
		<content><![CDATA[
true
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>t</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "([\\w=,(:]|=\\{)\\s*t$"},
			]
		]]></context>
		<order>2</order>
		<description>lang: true</description>
	</snippet>

c	<snippet>
		<content><![CDATA[
false
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>f</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "([\\w=,(:]|=\\{)\\s*f$"},
			]
		]]></context>
		<order>2</order>
		<description>lang: false</description>
	</snippet>

	<snippet>
		<content><![CDATA[
undefined
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>u</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "([\\w=,(:]|=\\{)\\s*u$"},
			]
		]]></context>
		<order>2</order>
		<description>lang: undefined</description>
	</snippet>

	<snippet>
		<content><![CDATA[
success
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>s</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.s$"},
			]
		]]></context>
		<description>lang: success</description>
	</snippet>

	<snippet>
		<content><![CDATA[
then(${0:$selection})
]]></content>
	<commands>
		[
			"RUN",
			{"command": "add_semicolon_to_statement"},
		]
	</commands>
		<tabTrigger>t</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "\\.\\s*t$"},
			]
		</context>
		<description>lang: then</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
then(function($1) {
	${0:$selection}
})
]]></content>
	<commands>
		[
			"RUN",
			{"command": "add_semicolon_to_statement"},
		]
	</commands>
		<tabTrigger>t</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "\\.\\s*t$"},
				{"key": "selection_empty", "operator": "equal", "operand": false},
			]
		</context>
		<description>lang: then with selection</description>
		<order>2</order>
	</snippet>

	<snippet>
		<content><![CDATA[
then(($1) => {
	$0
}
]]></content>
		<tabTrigger>then(</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: then function</description>
	</snippet>

	<snippet>
		<content><![CDATA[
then((response
]]></content>
		<tabTrigger>then((</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: then function response</description>
	</snippet>

	<snippet>
		<content><![CDATA[
function $1($2) {
	$0
}
]]></content>
		<tabTrigger>fn</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: function</description>
	</snippet>

	<snippet>
		<content><![CDATA[
function($2) {
	$0
}
]]></content>
		<tabTrigger>fu</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: function</description>
	</snippet>

	<snippet>
		<content><![CDATA[
($1) => {
	$0
}
]]></content>
		<tabTrigger>j</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: doublearrow callback</description>
	</snippet>

	<snippet>
		<content><![CDATA[
($1) => $0
]]></content>
		<tabTrigger>jj</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: inline doublearrow callback</description>
	</snippet>

	<snippet>
		<content><![CDATA[
var ${1:$selection__or__last_assigned_variable}
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>v</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: stringify</description>
	</snippet>

	<snippet>
		<content><![CDATA[
this.
]]></content>
		<tabTrigger>.</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: this</description>
	</snippet>

	<snippet>
		<content><![CDATA[
this.constructor
]]></content>
		<tabTrigger>tc</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: this.constructor</description>
	</snippet>

	<snippet>
		<content><![CDATA[
this.constructor.
]]></content>
		<tabTrigger>tc</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "following_text_end", "operator": "regex_contains", "operand": "^[\\w\\.]"},
			]
		]]></context>
		<description>lang: this.constructor.</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
constructor($1) {
  $0
}
]]></content>
		<tabTrigger>dc</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: constructor</description>
	</snippet>

	<snippet>
		<content><![CDATA[
super($1)
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>su</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: super</description>
	</snippet>

	<snippet>
		<content><![CDATA[
class $1 {

	$0

}
]]></content>
		<tabTrigger>cl</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: class</description>
	</snippet>

	<snippet>
		<content><![CDATA[
$1($2) {
	$0
}
]]></content>
		<tabTrigger>d</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: define method</description>
	</snippet>

	<snippet>
		<content><![CDATA[
$1 = ($2) => {
	$0
}
]]></content>
		<tabTrigger>dd</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: define method</description>
	</snippet>

	<snippet>
		<content><![CDATA[
let ${0:$selection__or__last_assigned_variable}
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>e</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: let</description>
	</snippet>

	<snippet>
		<content><![CDATA[
let $1 = ${0:$selection__or__last_assigned_variable}
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>e</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "following_text_end", "operator": "regex_contains", "operand": "\\S"},
				{"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*\\S+ ="},
			]
		]]></context>
		<description>lang: let</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
const ${1:$selection__or__last_assigned_variable} = $0
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>cc</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: const</description>
	</snippet>

	<snippet>
		<content><![CDATA[
const $1 = ${0:$selection__or__last_assigned_variable}
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>cc</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "following_text_end", "operator": "regex_contains", "operand": "\\S"},
				{"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*\\S+ ="},
			]
		]]></context>
		<description>lang: const</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
const { ${1:$selection__or__last_assigned_variable} } = $0
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>c</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: const {}</description>
	</snippet>

	<snippet>
		<content><![CDATA[
const { $1 } = ${0:$selection__or__last_assigned_variable}
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>c</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "following_text_end", "operator": "regex_contains", "operand": "\\S"},
				{"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*\\S+ ="},
			]
		]]></context>
		<description>lang: const {}</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
export $0
]]></content>
		<tabTrigger>ex</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: export</description>
	</snippet>

	<snippet>
		<content><![CDATA[
export default $0
]]></content>
		<tabTrigger>ed</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: export default</description>
	</snippet>

	<snippet>
		<content><![CDATA[
export { ${1:$selection__or__last_assigned_variable} };
]]></content>
		<trigger>x</trigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^x$"},
			]
		]]></context>
		<description>lang: export</description>
	</snippet>

	<snippet>
		<content><![CDATA[
import $1 from '$2';
]]></content>
		<tabTrigger>im</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^im$"},
			]
		]]></context>
		<description>lang: import</description>
	</snippet>

	<snippet>
		<content><![CDATA[
import $1 from './${2:$1}';
]]></content>
		<tabTrigger>il</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^il$"},
			]
		]]></context>
		<description>lang: import</description>
	</snippet>

	<snippet>
		<content><![CDATA[
import theme from 'components/theme';
]]></content>
		<tabTrigger>it</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^it$"},
			]
		]]></context>
		<description>lang: import theme</description>
	</snippet>

	<snippet>
		<content><![CDATA[
import $1 from 'services/$1';
]]></content>
		<tabTrigger>ise</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^ise$"},
			]
		]]></context>
		<description>lang: import service</description>
	</snippet>

	<snippet>
		<content><![CDATA[
import $1 from 'Components/$1';
]]></content>
		<tabTrigger>ico</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^ico$"},
			]
		]]></context>
		<description>lang: import component</description>
	</snippet>

	<snippet>
		<content><![CDATA[
import { $1 } from 'components/Modules/$1';
]]></content>
		<tabTrigger>ix</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^ix$"},
			]
		]]></context>
		<description>lang: import extended components</description>
	</snippet>

	<snippet>
		<content><![CDATA[
typeof $1
]]></content>
		<tabTrigger>to</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: typeof</description>
	</snippet>

	<snippet>
		<content><![CDATA[
instanceof $1
]]></content>
		<tabTrigger>io</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: instanceof</description>
	</snippet>

	<snippet>
		<content><![CDATA[
return ${0:$selection__or__last_assigned_variable}
]]></content>
		<commands><![CDATA[
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/add_semicolon_and_select_token.sublime-macro"}
				},
				"RUN",
			]
		]]></commands>
		<tabTrigger>r</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: return</description>
	</snippet>

	<snippet>
		<content><![CDATA[
return null
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>rn</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: return null</description>
	</snippet>

	<snippet>
		<content><![CDATA[
return true
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>rt</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: return true</description>
	</snippet>

	<snippet>
		<content><![CDATA[
return false
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>rf</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: return false</description>
	</snippet>

	<snippet>
		<content><![CDATA[
return result
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>rr</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: return result</description>
	</snippet>

	<snippet>
		<content><![CDATA[
continue ;
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>c</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "selection_empty", "operator": "equal", "operand": true},
				{"key": "preceding_text_begin", "operator": "not_regex_contains", "operand": "\\s*c$"},
			]
		</context>
		<description>lang: continue</description>
	</snippet>

	<snippet>
		<content><![CDATA[
throw ':('
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>q</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: throw</description>
	</snippet>

	<snippet>
		<content><![CDATA[
throw ${1:error}
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>th</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: throw</description>
	</snippet>

	<snippet>
		<content><![CDATA[
throw new Error(${1:error})
]]></content>
		<commands>
			[
				"RUN",
				{"command": "add_semicolon_to_statement"},
			]
		</commands>
		<tabTrigger>te</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: throw</description>
	</snippet>

	<snippet>
		<content><![CDATA[
if (${1:$last_assigned_variable}) {
	${0:$selection}
}
]]></content>
		<tabTrigger>i</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\s*i$"},
			]
		</context>
		<description>lang: if</description>
	</snippet>

	<snippet>
		<content><![CDATA[
if (!${1:$last_assigned_variable}) {
	${0:$selection}
}
]]></content>
		<tabTrigger>in</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\s*in$"},
			]
		</context>
		<description>lang: if not</description>
	</snippet>

	<snippet>
		<content><![CDATA[
if (${1:$last_assigned_variable}) {
	${0:$selection}
}
]]></content>
		<commands>
			[
				{"command": "move_to", "args": {"extend": true, "to": "eol"}},
				"RUN",
			]
		</commands>
		<tabTrigger>i</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\s*i$"},
				{"key": "following_text_end", "operator": "regex_contains", "operand": "\\S"},
			]
		</context>
		<description>lang: if</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
if (!${1:$last_assigned_variable}) {
	${0:$selection}
}
]]></content>
		<commands>
			[
				{"command": "move_to", "args": {"extend": true, "to": "eol"}},
				"RUN",
			]
		</commands>
		<tabTrigger>in</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\s*in$"},
				{"key": "following_text_end", "operator": "regex_contains", "operand": "\\S"},
			]
		</context>
		<description>lang: if</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
for ($1) {
	$0
}
]]></content>
		<commands>
			[
				{"command": "move_to", "args": {"extend": true, "to": "eol"}},
				"RUN",
			]
		</commands>
		<tabTrigger>f</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: for</description>
		<order>1</order>
	</snippet>
	<snippet>
		<content><![CDATA[
try {
	${2:$selection}
} catch (${1:error}) {
	$0
}
]]></content>
		<commands>
			[
				{"command": "move_to", "args": {"extend": true, "to": "eol"}},
				"RUN",
			]
		</commands>
		<tabTrigger>tr</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: try</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
else {
	$0
}
]]></content>
		<tabTrigger>e</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "}\\s*e$"},
			]
		</context>
		<description>lang: else</description>
		<order>2</order>
	</snippet>

	<snippet>
		<content><![CDATA[
else if (${1:$last_assigned_variable}) {
	${0:$selection}
}
]]></content>
		<tabTrigger>ei</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<context>
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\}\\s*ei"},
			]
		</context>
		<description>lang: else if</description>
	</snippet>

	<snippet>
		<content><![CDATA[
this.$1 = this.$1.bind(this);
]]></content>
		<tabTrigger>tb</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: bind</description>
	</snippet>

	<snippet>
		<content><![CDATA[
(($1) => {
	$0
}
]]></content>
		<tabTrigger>(</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: callback</description>
	</snippet>

	<snippet>
		<content><![CDATA[
 = ]]></content>
		<commands>
			[
				"RUN",
				{"command": "goto_character", "args": {"character": "{"}},
				{"command": "insert_text", "args": {"text": "=> "}},
			]
		</commands>
		<trigger>=</trigger>
		<scope>source.[tj]sx?</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\w\\s*=$"},
				{"key": "following_text_end", "operator": "regex_contains", "operand": "^\\("},
			]
		]]></context>
		<description>lang: define bind</description>
	</snippet>

	<snippet>
		<content><![CDATA[
await $0
]]></content>
		<tabTrigger>a</tabTrigger>
		<scope>source.[tj]sx?</scope>
		<description>lang: await</description>
	</snippet>
</snippets>
