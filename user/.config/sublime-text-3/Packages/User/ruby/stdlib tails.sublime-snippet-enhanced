<snippets>

	<snippet>
		<content><![CDATA[
count
]]></content>
		<tabTrigger>l</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.l$"},
			]
		]]></context>
		<description>stdlib: File.read</description>
	</snippet>

	<snippet>
		<content><![CDATA[
length
]]></content>
		<tabTrigger>ll</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ll$"},
			]
		]]></context>
		<description>stdlib: File.read</description>
	</snippet>

	<snippet>
		<content><![CDATA[
to_s
]]></content>
		<tabTrigger>s</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.s$"},
			]
		]]></context>
		<description>stdlib: to_s</description>
	</snippet>

	<snippet>
		<content><![CDATA[
to_sym
]]></content>
		<tabTrigger>y</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.y$"},
			]
		]]></context>
		<description>stdlib: to_s</description>
	</snippet>

	<snippet>
		<content><![CDATA[
to_i
]]></content>
		<tabTrigger>ti</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ti$"},
			]
		]]></context>
		<description>stdlib: to_i</description>
	</snippet>

	<snippet>
		<content><![CDATA[
to_f
]]></content>
		<tabTrigger>tf</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.tf$"},
			]
		]]></context>
		<description>stdlib: to_f</description>
	</snippet>

	<snippet>
		<content><![CDATA[
nil?
]]></content>
		<trigger>?</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.\\?$"},
			]
		]]></context>
		<description>stdlib: nil</description>
	</snippet>

	<snippet>
		<content><![CDATA[
start_with?($1)
]]></content>
		<tabTrigger>sw</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.sw$"},
			]
		]]></context>
		<description>stdlib: start_with</description>
	</snippet>

	<snippet>
		<content><![CDATA[
end_with?($1)
]]></content>
		<tabTrigger>ew</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ew$"},
			]
		]]></context>
		<description>stdlib: end_with</description>
	</snippet>

	<snippet>
		<content><![CDATA[
instance_of?($1)
]]></content>
		<tabTrigger>io</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.io$"},
			]
		]]></context>
		<description>stdlib: instance_of</description>
	</snippet>

	<snippet>
		<content><![CDATA[
respond_to?($1)
]]></content>
		<tabTrigger>ro</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ro$"},
			]
		]]></context>
		<description>stdlib: respond_to</description>
	</snippet>

	<snippet>
		<content><![CDATA[
is_a?($1)
]]></content>
		<tabTrigger>ia</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ia$"},
			]
		]]></context>
		<description>stdlib: is_a</description>
	</snippet>

	<snippet>
		<content><![CDATA[
kind_of?($1)
]]></content>
		<tabTrigger>ko</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ko$"},
			]
		]]></context>
		<description>stdlib: kind_of</description>
	</snippet>

	<snippet>
		<content><![CDATA[
empty?
]]></content>
		<tabTrigger>em</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.em$"},
			]
		]]></context>
		<description>stdlib: empty</description>
	</snippet>

	<snippet>
		<content><![CDATA[
present?
]]></content>
		<tabTrigger>p</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.p"},
			]
		]]></context>
		<description>stdlib: present</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
has_key?($1)
]]></content>
		<tabTrigger>hk</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.hk$"},
			]
		]]></context>
		<description>stdlib: has_key</description>
	</snippet>

	<snippet>
		<content><![CDATA[
include?($1)
]]></content>
		<tabTrigger>iu</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.iu$"},
			]
		]]></context>
		<description>stdlib: includes</description>
	</snippet>

	<snippet>
		<content><![CDATA[
try(:$1)
]]></content>
		<tabTrigger>t</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.t$"},
			]
		]]></context>
		<description>stdlib: try</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
merge(${0:$selection})
]]></content>
		<tabTrigger>m</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.m$"},
			]
		]]></context>
		<description>stdlib: merge</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
exists?
]]></content>
		<tabTrigger>ex</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ex$"},
			]
		]]></context>
		<description>stdlib: exists</description>
		<order>1</order>
	</snippet>

</snippets>