<snippets>

	<snippet>
		<content><![CDATA[
before :each do
	$0
end
]]></content>
		<tabTrigger>be</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: before each</description>
	</snippet>

	<snippet>
		<content><![CDATA[
before :all do
	$0
end
]]></content>
		<tabTrigger>ba</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: before all</description>
	</snippet>

	<snippet>
		<content><![CDATA[
after :each do
	$0
end
]]></content>
		<tabTrigger>ae</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: after each</description>
	</snippet>

	<snippet>
		<content><![CDATA[
describe '$1' do
	$0
end
]]></content>
		<tabTrigger>de</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: describe</description>
	</snippet>

	<snippet>
		<content><![CDATA[
context '$1' do
	$0
end
]]></content>
		<tabTrigger>co</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: context</description>
	</snippet>

	<snippet>
		<content><![CDATA[
it '$1' do
	$0
end
]]></content>
		<tabTrigger>it</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: it</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
let(:$1) {
	$0
}
]]></content>
		<tabTrigger>l</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^(\\s*)l$"},
			]
		]]></context>
		<description>rspec: let(NAME) { ... }</description>
	</snippet>

	<snippet>
		<content><![CDATA[
let!(:$1) {
	$0
}
]]></content>
		<trigger>ll</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "^(\\s*)ll$"},
			]
		]]></context>
		<description>rspec: let(NAME) { ... }</description>
	</snippet>

	<snippet>
		<content><![CDATA[
expect(${1:$selection__or__last_assigned_variable}).to $0
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>x</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to</description>
	</snippet>

	<snippet>
		<content><![CDATA[
expect_any_instance_of(${1:$selection__or__last_assigned_variable}).to $0
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>xa</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to</description>
	</snippet>

	<snippet>
		<content><![CDATA[
expect { ${1:$selection__or__last_assigned_variable} }.to $0
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>xx</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to</description>
	</snippet>

	<snippet>
		<content><![CDATA[
expect { ${1:$selection__or__last_assigned_variable} }.to change { $2 }.${3:by($4)}
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>xc</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: expect { EXPR }.to change { EXPR }</description>
	</snippet>

	<snippet>
		<content><![CDATA[
change { $2 }.${3:by($4)}
]]></content>
		<trigger>c</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[\\)}]\\.to(_not)?\\s+c$"},
			]
		]]></context>
		<description>rspec: change { EXPR }</description>
	</snippet>

	<snippet>
		<content><![CDATA[
expect { ${1:$selection__or__last_assigned_variable} }.to raise_error(${2:error})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>xr</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: expect { EXPR }.to change { EXPR }</description>
	</snippet>

	<snippet>
		<content><![CDATA[
allow(${1:$selection__or__last_assigned_variable}).to $0
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>a</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: allow(OBJ).to</description>
	</snippet>

	<snippet>
		<content><![CDATA[
allow_any_instance_of(${1:$selection__or__last_assigned_variable}).to $0
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>aa</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: allow(OBJ).to</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
_not $0
]]></content>
		<commands>
			[
				{"command": "left_delete"},
				"RUN",
			]
		</commands>
		<trigger>n</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[\\)}]\\.to\\sn$"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to_not</description>
	</snippet>

	<snippet>
		<content><![CDATA[
eq($1)
]]></content>
		<trigger>e</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\)\\.to(_not)?\\s+e$"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to eq</description>
	</snippet>

	<snippet>
		<content><![CDATA[
raise_error(${1:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<trigger>ra</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.to(_not)?\\s+ra$"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to raise_error</description>
	</snippet>

	<snippet>
		<content><![CDATA[
receive(${1:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<trigger>re</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\)\\.to(_not)?\\s+re$"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to receive</description>
	</snippet>

	<snippet>
		<content><![CDATA[
with(${1:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<trigger>w</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "receive\\("},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\)\\.w"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to receive</description>
	</snippet>

	<snippet>
		<content><![CDATA[
and_return(${1:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<trigger>ae</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "receive\\("},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\)\\.ae"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to receive</description>
	</snippet>

	<snippet>
		<content><![CDATA[
and_raise(${1:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<trigger>aa</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "receive\\("},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\)\\.aa"},
			]
		]]></context>
		<description>rspec: expect(OBJ).to receive</description>
	</snippet>

	<snippet>
		<content><![CDATA[
save_screenshot(${1:'screenshot.jpg'})
]]></content>
		<tabTrigger>ss</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: save_screenshot</description>
	</snippet>

	<snippet>
		<content><![CDATA[
sleep(2)
save_screenshot(${1:'screenshot.jpg'})
]]></content>
		<tabTrigger>sc</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: save_screenshot</description>
	</snippet>

	<snippet>
		<content><![CDATA[
params: {$0}
]]></content>
		<tabTrigger>p</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": ",\\s*p$"},
			]
		]]></context>
		<description>rspec: save_screenshot</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
response
]]></content>
		<tabTrigger>s</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: response</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
response.status
]]></content>
		<tabTrigger>rs</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: response</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
response.body
]]></content>
		<tabTrigger>rb</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: response</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
FactoryGirl.create(:${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>fc</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: create</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
FactoryGirl.build(:${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>fb</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "filename", "operator": "regex_contains", "operand": "_spec\\.rb$"},
			]
		]]></context>
		<description>rspec: build</description>
		<order>1</order>
	</snippet>

</snippets>