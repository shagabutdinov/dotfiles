<snippets>

	<snippet>
		<content><![CDATA[
p "XXXX", Benchmark.measure {
	${0:$selection}
}
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>pb</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: p "XXXX", Benchmark.measure {</description>
	</snippet>

	<snippet>
		<content><![CDATA[
puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{Time.now.to_f - \$TIME}")
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>pe</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{Time.now.to_f - \$TIME}")</description>
	</snippet>

	<snippet>
		<content><![CDATA[
puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{${1:$selection}}")
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>p</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{${1:$selection}}")</description>
	</snippet>

	<snippet>
		<content><![CDATA[
puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{JSON.pretty_generate(${1:$selection})}")
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>pj</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{JSON.pretty_generate(${1:$selection})}")</description>
	</snippet>

	<snippet>
		<content><![CDATA[
puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{JSON.pretty_generate(${1:$selection})}")
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>pp</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER #{JSON.pretty_generate(${1:$selection})}")</description>
	</snippet>

	<snippet>
		<content><![CDATA[
puts("XXXX $TM_FILENAME:$TM_LINE_NUMBER XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX\n")
]]></content>
		<tabTrigger>pt</tabTrigger>
		<scope>source.ruby</scope>
		<description>operators: puts "TEST" * 100</description>
	</snippet>

	<snippet>
		<content><![CDATA[
File.join(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>fj</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: File.join(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
File.exist?(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>fe</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: File.exist?(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
File.basename(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>fb</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: File.basename(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
File.dirname(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>fd</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: File.dirname(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
JSON.generate(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>jg</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: JSON.generate(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
JSON.pretty_generate(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>je</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: JSON.pretty_generate(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
JSON.parse(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>jp</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: JSON.parse(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
JSON.parse(${0:$selection__or__last_assigned_variable}, symbolize_names: true)
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>jpp</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: JSON.parse(${0:$selection__or__last_assigned_variable}, symbolize_names: true)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
File.write($1, ${2:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{"command": "move_to", "args": {"extend": true, "to": "eol"}, "context": [
					{"key": "following_text_end", "operator": "regex_contains", "operand": "^\\S"},
				]},
				"RUN",
			]
		</commands>
		<tabTrigger>fw</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: File.write($1, ${2:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
File.write('log', ${1:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{"command": "move_to", "args": {"extend": true, "to": "eol"}, "context": [
					{"key": "following_text_end", "operator": "regex_contains", "operand": "^\\S"},
				]},
				"RUN",
			]
		</commands>
		<tabTrigger>fl</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: File.write('log', ${1:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
File.read(${0:$selection__or__last_assigned_variable})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>fr</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: File.read(${0:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
::DateTime.now
]]></content>
		<tabTrigger>dn</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: ::DateTime.now</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Proc.new do |${1:args}|
	$0
end
]]></content>
		<tabTrigger>pn</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Proc.new do |${1:args}|</description>
	</snippet>

	<snippet>
		<content><![CDATA[
lambda do |${1:args}|
	$0
end
]]></content>
		<tabTrigger>la</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: lambda do |${1:args}|</description>
	</snippet>

	<snippet>
		<content><![CDATA[
I18n.t('${1:$selection__or__last_assigned_variable}')
]]></content>
		<tabTrigger>it</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: I18n.t('${1:$selection__or__last_assigned_variable}')</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Base64.encode64(${1:$selection__or__last_assigned_variable})
]]></content>
		<tabTrigger>be</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Base64.encode64(${1:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Base64.decode64(${1:$selection__or__last_assigned_variable})
]]></content>
		<tabTrigger>bd</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Base64.decode64(${1:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Base64.urlsafe_encode64(${1:$selection__or__last_assigned_variable})
]]></content>
		<tabTrigger>bue</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Base64.urlsafe_encode64(${1:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Base64.urlsafe_decode64(${1:$selection__or__last_assigned_variable})
]]></content>
		<tabTrigger>bud</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Base64.urlsafe_decode64(${1:$selection__or__last_assigned_variable})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
instance_variable_get(:@$0)
]]></content>
		<tabTrigger>ig</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: instance_variable_get(:@$0)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
length
]]></content>
		<tabTrigger>l</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.l$"},
			]
		]]></context>
		<description>stdlib: length</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
count
]]></content>
		<tabTrigger>length</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.length$"},
			]
		]]></context>
		<description>stdlib: count</description>
	</snippet>

	<snippet>
		<content><![CDATA[
to_s
]]></content>
		<tabTrigger>s</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.s$"},
			]
		]]></context>
		<description>stdlib: to_s</description>
	</snippet>

	<snippet>
		<content><![CDATA[
to_sym
]]></content>
		<tabTrigger>y</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.y$"},
			]
		]]></context>
		<description>stdlib: to_sym</description>
	</snippet>

	<snippet>
		<content><![CDATA[
to_i
]]></content>
		<tabTrigger>i</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.i$"},
			]
		]]></context>
		<description>stdlib: to_i</description>
		<order>2</order>
	</snippet>

	<snippet>
		<content><![CDATA[
to_f
]]></content>
		<tabTrigger>tf</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.tf$"},
			]
		]]></context>
		<description>stdlib: to_f</description>
	</snippet>

	<snippet>
		<content><![CDATA[
nil?
]]></content>
		<trigger>?</trigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.\\?$"},
			]
		]]></context>
		<description>stdlib: nil?</description>
	</snippet>

	<snippet>
		<content><![CDATA[
start_with?($1)
]]></content>
		<tabTrigger>sw</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.sw$"},
			]
		]]></context>
		<description>stdlib: start_with?($1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
end_with?($1)
]]></content>
		<tabTrigger>ew</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ew$"},
			]
		]]></context>
		<description>stdlib: end_with?($1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
instance_of?($1)
]]></content>
		<tabTrigger>io</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.io$"},
			]
		]]></context>
		<description>stdlib: instance_of?($1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
respond_to?($1)
]]></content>
		<tabTrigger>ro</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: respond_to?($1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
is_a?($1)
]]></content>
		<tabTrigger>ia</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ia$"},
			]
		]]></context>
		<description>stdlib: is_a?($1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
kind_of?($1)
]]></content>
		<tabTrigger>ko</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ko$"},
			]
		]]></context>
		<description>stdlib: kind_of?($1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
empty?
]]></content>
		<tabTrigger>em</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.em$"},
			]
		]]></context>
		<description>stdlib: empty?</description>
	</snippet>

	<snippet>
		<content><![CDATA[
present?
]]></content>
		<tabTrigger>p</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.p"},
			]
		]]></context>
		<description>stdlib: present?</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
has_key?($1)
]]></content>
		<tabTrigger>hk</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.hk$"},
			]
		]]></context>
		<description>stdlib: has_key?($1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
include?(${1:$selection})
]]></content>
		<commands>
			[
				{"command": "run_macro_file_with_context", "args": {"file":
					"Packages/User/macro/select_token.sublime-macro"}},
				"RUN",
			]
		</commands>
		<tabTrigger>iu</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.iu$"},
			]
		]]></context>
		<description>stdlib: include?(${1:$selection})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
try(:$1)
]]></content>
		<tabTrigger>t</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.t$"},
			]
		]]></context>
		<description>stdlib: try(:$1)</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
merge(${0:$selection})
]]></content>
		<tabTrigger>me</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.m$"},
			]
		]]></context>
		<description>stdlib: merge(${0:$selection})</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
merge!(${0:$selection})
]]></content>
		<tabTrigger>mm</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.mm$"},
			]
		]]></context>
		<description>stdlib: merge!(${0:$selection})</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
exists?
]]></content>
		<tabTrigger>ex</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_text_begin", "operator": "regex_contains", "operand": "\\.ex$"},
			]
		]]></context>
		<description>stdlib: exists?</description>
		<order>1</order>
	</snippet>

	<snippet>
		<content><![CDATA[
Hash
]]></content>
		<tabTrigger>H</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Hash</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Array
]]></content>
		<tabTrigger>A</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Array</description>
	</snippet>

	<snippet>
		<content><![CDATA[
String
]]></content>
		<tabTrigger>S</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: String</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Symbol
]]></content>
		<tabTrigger>Y</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Symbol</description>
	</snippet>

	<snippet>
		<content><![CDATA[
DateTime
]]></content>
		<tabTrigger>D</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: DateTime</description>
	</snippet>

	<snippet>
		<content><![CDATA[
StandardError
]]></content>
		<tabTrigger>SE</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: StandardError</description>
	</snippet>

	<snippet>
		<content><![CDATA[
map { |$1|
	$0
}
]]></content>
		<tabTrigger>m</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "\\.\\s*m$"},
			]
		]]></context>
		<description>stdlib: map { |$1|</description>
	</snippet>

	<snippet>
		<content><![CDATA[
each { |$1|
	$0
}
]]></content>
		<tabTrigger>e</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "\\.\\s*e$"},
			]
		]]></context>
		<description>stdlib: each { |$1|</description>
	</snippet>

	<snippet>
		<content><![CDATA[
find { |$1|
	$0
}
]]></content>
		<tabTrigger>f</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "\\.\\s*f$"},
			]
		]]></context>
		<description>stdlib: find { |$1|</description>
	</snippet>

	<snippet>
		<content><![CDATA[
select { |$1|
	$0
}
]]></content>
		<tabTrigger>se</tabTrigger>
		<scope>source.ruby</scope>
		<context><![CDATA[
			[
				{"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "\\.\\s*se$"},
			]
		]]></context>
		<description>stdlib: select { |$1|</description>
	</snippet>

	<snippet>
		<content><![CDATA[
sleep(10$1)
]]></content>
		<tabTrigger>sl</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: sleep(10$1)</description>
	</snippet>

	<snippet>
		<content><![CDATA[
puts Benchmark.measure {
	${0:$selection}
}
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>bm</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: puts Benchmark.measure {</description>
	</snippet>

	<snippet>
		<content><![CDATA[
Time.zone.parse(${1:$selection})
]]></content>
		<commands>
			[
				{
					"command": "run_macro_file_with_context",
					"args": {"file": "Packages/User/macro/select_token.sublime-macro"}
				},
				"RUN",
			]
		</commands>
		<tabTrigger>tp</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: Time.zone.parse(${1:$selection})</description>
	</snippet>

	<snippet>
		<content><![CDATA[
${1:10}.times do |${2:index}|
	${0:$selection}
end
]]></content>
		<tabTrigger>tt</tabTrigger>
		<scope>source.ruby</scope>
		<description>stdlib: ${1:10}.times do |${2:index}|</description>
	</snippet>
</snippets>