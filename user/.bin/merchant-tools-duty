#!/usr/bin/env node

const axios = require('axios');
const moment = require('moment');

const reportError = error => {
  if (error?.response?.status) {
    console.error(
      error.response.status +
        ' ' +
        error.response.statusText +
        JSON.stringify(error.response.data),
    );
  } else {
    throw error;
  }
};

const getStats = async () => {
  const yesterday = moment().subtract(14, 'days').format('YYYY-MM-DD');
  const today = moment().format('YYYY-MM-DD');

  try {
    const response = await axios({
      method: 'get',
      url: `https://api.sendgrid.com/v3/stats?start_date=${yesterday}&end_date=${today}`,
      headers: {
        Authorization: 'Bearer ' + process.env.SENDGRID_API_KEY,
      },
    });

    return ['date\t\trequests\tdelivered'].concat(
      response.data.map(
        row =>
          row.date +
          '\t' +
          row.stats[0].metrics.requests +
          '\t\t' +
          row.stats[0].metrics.delivered,
      ),
    );
  } catch (error) {
    reportError(error);
  }
};

const getUnsentEmails = async () => {
  try {
    const response = await axios({
      method: 'get',
      url: 'https://api.sendgrid.com/v3/messages?limit=100&query=status%3D%22not_delivered%22',
      headers: {
        Authorization: 'Bearer ' + process.env.SENDGRID_API_KEY,
      },
    });

    console.log(response.data);
  } catch (error) {
    reportError(error);
  }
};

const getBounces = async () => {
  try {
    const response = await axios({
      method: 'get',
      url: 'https://api.sendgrid.com/v3/suppression/bounces',
      headers: {
        Authorization: 'Bearer ' + process.env.SENDGRID_API_KEY,
      },
    });

    return response.data
      .filter(
        value =>
          parseInt(value.created) >
          new Date().getTime() / 1000 - 7 * 24 * 60 * 60,
      )
      .map(
        value =>
          '* ' +
          new Date(parseInt(value.created) * 1000).toISOString() +
          ' ' +
          value.email,
      );
  } catch (error) {
    reportError(error);
  }
};

async function main() {
  // Stats
  console.log('## Stats\n');
  console.log((await getStats()).join('\n'));
  console.log('');

  // Bounces
  console.log('## Bounces\n');
  const bounces = await getBounces();

  if (bounces.length > 0) {
    console.log((await getBounces()).join('\n'));
  } else {
    console.log('No bounces for the last 7 days');
  }

  console.log('');

  // Unset emails

  console.log('## Unsent emails\n');
  const unsentEmails = await getUnsentEmails();

  if (unsentEmails !== undefined) {
    if (unsentEmails.length > 0) {
      console.log(unsentEmails.join('\n'));
    } else {
      console.log('No new unset emails for the last 7 days');
    }
  }

  console.log('');
}

main();
